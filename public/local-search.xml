<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++运算符重载</title>
    <link href="/2024/05/31/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/2024/05/31/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c-运算符重载概念和原理"><a href="#c-运算符重载概念和原理" class="headerlink" title="c++运算符重载概念和原理"></a>c++运算符重载概念和原理</h1><p>c++的运算符加减乘除只能对于基本数据类型变量或常量进行运算，当我们想要进行对象之间的运算时略显繁琐，希望对象之间也可以直接使用运算符进行运算</p><p>利用 C++ 提供的“运算符重载”机制，赋予运算符新的功能，就能解决用<code>+</code>将两个对象相加这样的问题。</p><span id="more"></span><p>运算符重载，就是对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。运算符重载的目的是使得 C++ 中的运算符也能够用来操作对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">返回值类型 <span class="hljs-keyword">operator</span> 运算符(形参表) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。</p><p>运算符可以重载为全局函数，也可以被重载为成员函数，应用于类或结构体。</p><p>比如我们在写计算几何时可以定义point结构体用于表示点坐标重写运算符加减点坐标得到二维平面上的向量来计算会更加简便</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;;<br>    point <span class="hljs-keyword">operator</span> -(<span class="hljs-type">const</span> point&amp; p) &#123;<br>        x -= p.x; y -= p.y;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <br>    <span class="hljs-function">point <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span>, <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>    p1 = p1 - p2;<br>    cout &lt;&lt; p1.x&lt;&lt;<span class="hljs-string">&quot; &quot;</span> &lt;&lt; p1.y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果是</p><blockquote><p>-1 -2</p></blockquote><p>运算符重载为全局函数时，参数的个数等于运算符的目数（即操作数的个数）；运算符重载为成员函数时，参数的个数等于运算符的目数减一。</p><h1 id="运算符重载为友元函数"><a href="#运算符重载为友元函数" class="headerlink" title="运算符重载为友元函数"></a>运算符重载为友元函数</h1><p>一般情况下，将运算符重载为成员函数是较好的选择。但有时，重载为成员函数不能满足使用要求，重载为全局函数又不能访问类的私有成员，因此需要将运算符重载为友元。</p><p>在重载运算符的基础之上 在前面加上关键词friend 即可。重载的运算符可以访问到结构体内变量</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运算符重载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小技巧-寻找区间奇数个数</title>
    <link href="/2024/05/31/%E5%B0%8F%E6%8A%80%E5%B7%A7-%E6%B1%82%E5%8C%BA%E9%97%B4%E5%A5%87%E6%95%B0%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/05/31/%E5%B0%8F%E6%8A%80%E5%B7%A7-%E6%B1%82%E5%8C%BA%E9%97%B4%E5%A5%87%E6%95%B0%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>给定区间l，r 求区间的奇数个数</p><span id="more"></span><p>((r + 1) / 2 - l / 2)</p><p>有种前缀和样子</p><p> r/2表示0到r之间奇数的个数 </p><p>+1是为了防止r是奇数时初二端点没算上</p><p>l/2表示0到l之间的奇数个数</p><p>没有+1是为了不算上l的端点值</p><p>实现类似arr[ r ]  - arr[ l-1 ] 的效果</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="/2024/05/31/%E6%88%91%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/05/31/%E6%88%91%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第三章-：-数据链路层"><a href="#第三章-：-数据链路层" class="headerlink" title="第三章 ： 数据链路层"></a>第三章 ： 数据链路层</h1><span id="more"></span><h2 id="3-1数据链路层问题"><a href="#3-1数据链路层问题" class="headerlink" title="3.1数据链路层问题"></a>3.1数据链路层问题</h2><ul><li><p>数据链路层地位</p><ul><li>网络中的主机，路由器都必须实现数据链路层</li><li>局域网的主机，交换机等都必须实现数据链路层</li></ul><blockquote><p>注意：不同链路层可能采用不同协议</p></blockquote><ul><li><p>数据链路层信道类型</p></li><li><p>点对点</p></li><li><blockquote><p>一对一的通信方式</p></blockquote></li><li><p>广播信道</p></li><li><blockquote><p>一对多 必须使用专用的共享信道协议</p></blockquote></li></ul></li></ul><h3 id="3-1-1数据链路和帧"><a href="#3-1-1数据链路和帧" class="headerlink" title="3.1.1数据链路和帧"></a>3.1.1数据链路和帧</h3><ul><li>链路<ul><li>一条无源的点到点的物理线路段，中间没有任何其他的交换节点</li><li>一条链路只是一条通路的一个组成部分</li><li>物理链路</li></ul></li><li>数据链路<ul><li>把实现控制数据的协议的硬件和软件加到链路上，构成了数据链路</li><li>逻辑链路</li><li>典型实现：适配器（网卡）</li><li>一般的适配器都包含了数据链路层和物理层这两层的功能</li></ul></li><li>帧</li><li>为什么需要数据链路层<ul><li>物理层解决了节点透明传输bits的问题</li><li>物理层没有解决的问题<ul><li>传输错误的问题</li><li>谁接收的问题</li><li>传输结束问题</li></ul></li></ul></li></ul><h3 id="3-1-2-三个基本问题"><a href="#3-1-2-三个基本问题" class="headerlink" title="3.1.2 三个基本问题"></a>3.1.2 三个基本问题</h3><ul><li><p>封装成帧</p><ul><li>在一段数据的前后分别添加首部和尾部，构成一个帧</li><li>首部和尾部一个重要作用就是帧定界（确定帧的界限）</li><li></li></ul></li><li><p>透明传输</p><ul><li>字节填充</li></ul></li><li><p>差错控制</p><ul><li><p>传输的过程中可能会因为各种原因导致一个或多个比特错误</p></li><li><p>循环冗余检验（crc）</p></li><li><p>CRC校验的原理</p><ul><li><p>多项式表示</p><ul><li><p>对如下二进制bit字符串：</p><script type="math/tex; mode=display">B = b_{n-1}b_{n-2}\dots b_{1}b_{0}</script></li><li><p>可以将其表示为一个虚拟变量 (x) 的多项式方程 (二进制加权形式)：</p></li></ul><script type="math/tex; mode=display">B（X） = b_{n-1}X^{n-1}+b_{n-2}X^{n-2}+\dots+b_1X+b_0</script><ul><li>例：字符串 (1100101) 可以表示为：</li></ul><script type="math/tex; mode=display">B(1100101) = x^6+x^5+x^2+x^1</script><ul><li>这样做的目的是，方便之后进行数学编码和对二进制数据串的操作 (如：模二运算)。</li></ul></li><li><p>模二多项式除法</p><ul><li><p>通常一个多项式B(x)除以另一个多项式G(x)会产生一个商多项式Q(x)和一个余数多项式R(x)：</p></li><li><script type="math/tex; mode=display">B（x）/G(x) = Q(x)+ R(x)</script></li><li><p>由于 模二减法=模二加法，上式可重写为：</p></li><li><script type="math/tex; mode=display">B(x)+R(x)=Q(x)⋅G(x)</script></li></ul></li></ul></li></ul></li></ul><h2 id="3-2点对点协议-ppp"><a href="#3-2点对点协议-ppp" class="headerlink" title="3.2点对点协议 ppp"></a>3.2点对点协议 ppp</h2><h3 id="3-2-1ppp协议特点"><a href="#3-2-1ppp协议特点" class="headerlink" title="3.2.1ppp协议特点"></a>3.2.1ppp协议特点</h3><p>协议应满足的需求</p><ul><li><p>协议的组成</p></li><li><p>一个将ip封装到串行链路的方法</p></li><li>一个链路控制协议（lcp） 用于建立、配置和测试链路</li><li>一套网络网络控制协议（ncp） 每个协议支持不同的网络层协议</li></ul><h3 id="3-2-2ppp帧格式"><a href="#3-2-2ppp帧格式" class="headerlink" title="3.2.2ppp帧格式"></a>3.2.2ppp帧格式</h3><p>各字段的意义</p><ul><li>首部的第一个字段和尾部的第二个字段都是标志字段F（flag）规定为0x7E</li><li>首部中第二个字段为地址字段A规定为0xFF</li><li>首部第三个字段为控制字段c规定为0x03</li><li>首部第四个字段为两个字节的协议字段</li><li>尾部第一个字段为两个字节用于crc检测的帧检测序列fcs</li></ul><p>字节填充（异步传输）</p><ul><li>将原始数据中出现的控制字符、帧定界符替换</li><li>在数据前填充一个字节作为转义 后一个字节编码改变<ul><li>控制字符+0x20 定界符7-&gt;5 eg: 0x7D -&gt; 0x5D</li></ul></li></ul><p>零比特填充（同步传输）</p><ul><li>如果发送端发现五个1相连 在后面添加一个0</li><li>同理接收端发现五个1相连 删除后面的一个0</li></ul><h3 id="3-2-3ppp协议工作过程"><a href="#3-2-3ppp协议工作过程" class="headerlink" title="3.2.3ppp协议工作过程"></a>3.2.3ppp协议工作过程</h3><ul><li><p>连接建立</p><ul><li><p>用户拨号接入isp后建立一条用户电脑和isp的物理连接</p></li><li><p>个人电脑向isp发送一系列链路控制协议lcp分组建立lcp连接</p></li><li><p>然后网络层网络控制协议ncp给新接入的用户分配一个临时的ip</p></li></ul></li><li><p>连接释放</p><ul><li>ncp释放网络层连接</li><li>收回分配的IP地址</li><li>lcp断开连接释放物理链路层连接</li><li>最后释放物理层连接</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键视频直播图片换脸</title>
    <link href="/2024/05/31/%E4%B8%80%E9%94%AE%E7%9B%B4%E6%92%AD%E8%A7%86%E9%A2%91%E5%9B%BE%E7%89%87%E6%8D%A2%E8%84%B8/"/>
    <url>/2024/05/31/%E4%B8%80%E9%94%AE%E7%9B%B4%E6%92%AD%E8%A7%86%E9%A2%91%E5%9B%BE%E7%89%87%E6%8D%A2%E8%84%B8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上周脑子里就有很多关于ai换脸的想法（很大胆的想法），放假回家之后马上开始寻找实现的方法，然后就发现了它：faceswap</p><p>非常简单上手的一款ai换脸软件。</p><span id="more"></span><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>连接：<a href="https://swapface.org/">https://swapface.org/</a></p><p>目前只有windows版本点击下载即可</p><p>下载后是一个.exe的安装程序</p><p>双击打开后选择合适位置安装</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>支持一键视频人脸替换，图片人脸替换和直播换脸</p><p>打开软件后需要先注册一个账号</p><p>每日免费上传十张照片 和生成十个视频 感觉差不多够用</p><p><s>不够用再注册账号嘛</s></p><p>然后介绍视频换脸</p><h2 id="video-faceswap"><a href="#video-faceswap" class="headerlink" title="video faceswap"></a>video faceswap</h2><p><img src="https://www.freeimg.cn/i/2024/01/12/65a11298888ba.png" alt="image-20240112181835117"></p><p>上方内置了四个视频作为被替换的视频右侧是需要替换成的人脸，可以自己上传图片。</p><p>左侧是选择一个视频，当视频中出现多个人脸时会让你选择被替换的人脸<img src="https://www.freeimg.cn/i/2024/01/12/65a11293b6acd.png" alt="image-20240112180423160"></p><p>随后再右侧点击需要替换成的人脸图片就完成了准备工作</p><p>下方显示<img src="https://www.freeimg.cn/i/2024/01/12/65a11293d2ad0.png" alt="image-20240112180555420"></p><p>我们可以同时替换多个人脸。</p><p>软件提供了四种替换模式。</p><p><img src="https://www.freeimg.cn/i/2024/01/12/65a1129271a27.png" alt="https"></p><p>快速模式顾名思义—快<s>但是效果差点</s></p><p>专业模式—没用过，应该是慢点效果好点</p><p>专家模式— 慢但是效果好</p><p>混合模式— 没用过 应该是上面模式混合使用？？</p><p>最后点击start就开始了视频的替换</p><p>我自己用amd显卡快速模式一分三十秒的视频大概跑十几分钟 </p><p>专家模式要上跑一个小时。</p><h2 id="stream-faceswap"><a href="#stream-faceswap" class="headerlink" title="stream faceswap"></a>stream faceswap</h2><p><img src="https://www.freeimg.cn/i/2024/01/12/65a11298edc9c.png" alt="image-20240112180110273"></p><p>需要在右侧选择摄像头和大小，下方选择替换的人脸图片，也可自行添加自己想要的人脸图片</p><h2 id="image-faceswap"><a href="#image-faceswap" class="headerlink" title="image faceswap"></a>image faceswap</h2><p><img src="https://www.freeimg.cn/i/2024/01/12/65a11299ee8c6.png" alt="image-20240112181134924"></p><p>同样的左侧是待替换照片，右侧是需要替换成的人脸照片 ，上传图片后选择人脸。选择模式后就开始替换了。</p>]]></content>
    
    
    <categories>
      
      <category>人工智能应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ai换脸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小技巧-寻找区间未出现的最小非负整数</title>
    <link href="/2024/05/31/%E5%B0%8F%E6%8A%80%E5%B7%A7-/"/>
    <url>/2024/05/31/%E5%B0%8F%E6%8A%80%E5%B7%A7-/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于mex：区间的mex被定义为区间中未出现的<strong>最小的非负整数</strong></p><span id="more"></span><p>,例如：<br></p><ul><li>[2，2，1]的mex是0，0不在这个区间中。</li><li>[3，1，0，1]的mex是2，因为0，1在这个区间中2不在</li><li>[0，3，1，2]的mex是4，因为0，1，2，3在这个区间中而4不在</li></ul><p>输入：</p><p>一串非负整数，表示数列</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N= <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    cin &gt;&gt; a[i];<br>        cnt[a[i]]++;<br>    &#125;<br>    <br>  <br>    <span class="hljs-keyword">while</span>(cnt[num]) num++;<br>    <br>    cout&lt;&lt; num &lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js逆向（其一）</title>
    <link href="/2024/05/31/js%E4%B8%80/"/>
    <url>/2024/05/31/js%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前两周一直在填鸭式的补框架快速过视频和案例，整个人非常麻木啊，于是想开个新坑也作为一项特长发展一下，数了数为数不多的会的东西，发现爬虫这里有些意思准备发掘一下，还能和专业互补。于是决定学习一下前端的逆向</p><span id="more"></span><h2 id="python中如何运行js"><a href="#python中如何运行js" class="headerlink" title="python中如何运行js"></a>python中如何运行js</h2><p>那么为什么要把js放本地来运行呢？</p><ul><li>首先是方便阅读代码，逆向这个东西不像开发写给人看，是给机器看的，难免就人看不太懂，生成的东西往往是原始的机器码、汇编代码或中间表示形式，可以利用python作为高级编程语言的特性进行代码重构，有助于快速理解逻辑。</li><li>其次py是一种广泛使用的，易上手的编程语言，第三方库丰富功能强大，可以自动化的进行一些操作便于批量分析，提高效率</li><li>Python在逆向工程社区中有广泛的使用和丰富的资源。有许多专门针对逆向工程的Python库、框架和工具。</li></ul><h2 id="py中调用js的库"><a href="#py中调用js的库" class="headerlink" title="py中调用js的库"></a>py中调用js的库</h2><ul><li><p>pyv8</p><ul><li>v8是google的开源js引擎，pyv8是对它的python层包装可以直接调用v8执行js代码<s>年久失修</s></li></ul></li><li><p>js2py</p><ul><li>纯python实现的js解析器和翻译器它更新到了19年<s>性能不高，bug不修</s></li></ul></li><li><p>pyexecjs</p><ul><li>移植自Ruby</li><li>执行js的引擎可自选，但一般都使用nodejs</li><li>缺点是执行大型js有点慢，特殊的输入输出会报错（输入输出参数编码一下）</li></ul></li><li><p>PyMiniRacer</p><ul><li>包装v8</li><li>新</li></ul></li></ul><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><h3 id="安装py库"><a href="#安装py库" class="headerlink" title="安装py库"></a>安装py库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pyexecjs<br></code></pre></td></tr></table></figure><h3 id="安装js环境"><a href="#安装js环境" class="headerlink" title="安装js环境"></a>安装js环境</h3><p>安装NodeJs</p><h3 id="检测安装是成功"><a href="#检测安装是成功" class="headerlink" title="检测安装是成功"></a>检测安装是成功</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> execjs<br>execjs.get().name()<br></code></pre></td></tr></table></figure><p>出现</p><blockquote><p>Node.js(V8)</p></blockquote><p>就成功了</p><h2 id="简单来个案例"><a href="#简单来个案例" class="headerlink" title="简单来个案例"></a>简单来个案例</h2><p>运行一行js代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> execjs <span class="hljs-keyword">as</span> js<br><br>js.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;a = new Array(1,2,3)&quot;</span>)<br></code></pre></td></tr></table></figure><p>没报错就成功     </p><p>但是肯定不会这样一行一行进行执行</p><p>接下来介绍一个新的方式执行js代码</p><h2 id="解析字符串运行代码"><a href="#解析字符串运行代码" class="headerlink" title="解析字符串运行代码"></a>解析字符串运行代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> execjs <span class="hljs-keyword">as</span> js<br><br><br>jstext = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">function hello(str)&#123;return str;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>res = js.<span class="hljs-built_in">compile</span>(jstext)<br>a = res.call(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;helloword&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>py</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git快速上手</title>
    <link href="/2024/05/31/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/31/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p><em>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</em></p><p><s>用于和小伙伴们一起整个大活</s></p><span id="more"></span><h2 id="git安装配置"><a href="#git安装配置" class="headerlink" title="git安装配置"></a>git安装配置</h2><p>安装这个资源太多了，俺也是新手俺就不献丑了</p><p>git工作流程</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><h2 id="git创建仓库"><a href="#git创建仓库" class="headerlink" title="git创建仓库"></a>git创建仓库</h2><p>使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> init<span class="hljs-meta"> [name]</span><br></code></pre></td></tr></table></figure><p>在当前目录下创建一个名为name 的仓库</p><p>如果不加name 会以当前目录作为仓库</p><p>始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">add</span> <span class="hljs-number">123.</span>c<br>git <span class="hljs-built_in">add</span> README<br>git commit -m ”<span class="hljs-keyword">first</span>“<span class="hljs-comment"> //不加-m参数会打开vim详细编辑ti&#x27;jiao说明</span><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> * <span class="hljs-comment">//跟踪全部文件</span><br></code></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure><p>克隆一个仓库到本地仓库</p><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>远程仓库操作</p><ul><li><code>git remote</code>：列出当前仓库中已配置的远程仓库。</li><li><code>git remote add &lt;remote_name&gt; &lt;remote_url&gt;</code>：添加一个新的远程仓库。指定一个远程仓库的名称和 URL，将其添加到当前仓库中。</li><li>git remote show [remote]  显示某个远程仓库信息</li></ul><h3 id="提交远程仓库"><a href="#提交远程仓库" class="headerlink" title="提交远程仓库"></a>提交远程仓库</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git push <span class="hljs-tag">&lt;<span class="hljs-name">远程主机名</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">本地分支名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>本地与远程分支相同可以省略冒号</p><h2 id="git-分支管理"><a href="#git-分支管理" class="headerlink" title="git 分支管理"></a>git 分支管理</h2><p>创建分支命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git <span class="hljs-title function_">branch</span> <span class="hljs-params">(branchname)</span><br></code></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">git checkout <span class="hljs-comment">(branchname)</span><br></code></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> <br></code></pre></td></tr></table></figure><p>列出分支基本命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p>git log</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
