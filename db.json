{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Szy.png","path":"img/Szy.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/elysia.jpg","path":"img/elysia.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/smh.jpg","path":"img/smh.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"2a6f70f9e96abe021d64073d980c7d06f432ec5d","modified":1717160887864},{"_id":"source/_posts/一键直播视频图片换脸.md","hash":"916d2c7fa514b4c9bdd14bf66a6eacf453f0a946","modified":1717160887861},{"_id":"source/_posts/git使用.md","hash":"435dd58fe23c5b665a1c24c3ce0e9576e6793d27","modified":1717160887860},{"_id":"source/_posts/js一.md","hash":"352381f2b927a7dd66a6b34807a9cb85eb269a53","modified":1717160887861},{"_id":"source/_posts/小技巧-求区间奇数个数.md","hash":"7d1d61ee6ee41f5e10bbc99890fd0d01c961e0c5","modified":1717160887862},{"_id":"source/_posts/小技巧-.md","hash":"63afac247f720f90bd6bc360673b135e493e92cc","modified":1717160887862},{"_id":"source/_posts/矩阵快速幂.md","hash":"b4ef9947755094355e41fd7ea66168bde7b9d631","modified":1717164552839},{"_id":"source/_posts/我的计算机网络.md","hash":"fc5e7cb001dc87fef6d74cd230648bae676a8035","modified":1717160887863},{"_id":"source/_posts/运算符重载.md","hash":"5842576f91183de24b08cb1cf5191f4c58eabe51","modified":1717160887863},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717160887954},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1717160887865},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1717160887866},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1717160887872},{"_id":"themes/fluid/README.md","hash":"4030feb7e301d83570682ea947383cc460e3c36c","modified":1717160887873},{"_id":"themes/fluid/README_en.md","hash":"2633d56de104ff34a2d65abe97d779bc682caa1d","modified":1717160887874},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1717160887871},{"_id":"themes/fluid/package.json","hash":"a961e600dd7b9c74c66b91c106cf941a37000b2d","modified":1717160887913},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1717160887865},{"_id":"themes/fluid/_config.yml","hash":"190c1c727d1d3bab57ad3d7bb1b17606285127a9","modified":1717160887874},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1717160887875},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1717160887876},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1717160887877},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1717160887877},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1717160887876},{"_id":"themes/fluid/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1717160887878},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1717160887878},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1717160887879},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1717160887879},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1717160887880},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1717160887908},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1717160887908},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1717160887909},{"_id":"themes/fluid/layout/index.ejs","hash":"797b70bc7ad15e1adfecde1162230a20ff4f212d","modified":1717160887909},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1717160887908},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1717160887910},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1717160887910},{"_id":"themes/fluid/layout/post.ejs","hash":"bdea32ca3218938271da064446f2de9b3fcfaa6d","modified":1717160887911},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1717160887912},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1717160887911},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1717160887912},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1717160887870},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1717160887869},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1717160887867},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1717160887868},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1717160887868},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1717160887868},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1717160887869},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1717160887881},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1717160887866},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1717160887882},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1717160887871},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1717160887883},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1717160887882},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1717160887890},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1717160887891},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1717160887893},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1717160887914},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1717160887893},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1717160887895},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1717160887896},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1717160887906},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1717160887907},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"2d03854aa1d31211bae505bc72c820e761ba357e","modified":1717160887919},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1717160887918},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1717160887919},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1717160887919},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1717160887918},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1717160887926},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1717160887927},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1717160887927},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1717160887920},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1717160887928},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1717160887930},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1717160887930},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1717160887929},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1717160887928},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1717160887931},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1717160887931},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1717160887920},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1717160887921},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1717160887923},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1717160887921},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1717160887924},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1717160887923},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1717160887924},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1717160887924},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1717160887925},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1717160887925},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1717160887958},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1717160887958},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1717160887958},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1717160887959},{"_id":"themes/fluid/source/img/1.jpg","hash":"74e1aece267d285de315bb5cec54ff02016a9230","modified":1717160887960},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1717160887969},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1717160887970},{"_id":"themes/fluid/source/img/smh.jpg","hash":"bf7ad126e88766b8da34f9af58190f5e78582296","modified":1717160887973},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1717160887971},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1717160887979},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1717160887975},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7e15ce2ef16b0705148306a27c6a79d809c3040b","modified":1717160887976},{"_id":"themes/fluid/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1717160887976},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1717160887977},{"_id":"themes/fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1717160887977},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1717160887976},{"_id":"themes/fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1717160887978},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1717160887978},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1717160887884},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1717160887884},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1717160887885},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1717160887886},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1717160887885},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1717160887888},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1717160887887},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1717160887886},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1717160887888},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1717160887893},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1717160887889},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1717160887886},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1717160887892},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1717160887890},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1717160887894},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1717160887895},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1717160887898},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"6e0f0095e1cb1c0d89b6697ebcd33656b4e3e14c","modified":1717160887897},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1717160887898},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1717160887897},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1717160887899},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1717160887901},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1717160887900},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1717160887900},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1717160887902},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1717160887902},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e026955c454ec57bbbb7e9b7d800db90564fc6af","modified":1717160887903},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1717160887901},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1717160887903},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1717160887904},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1717160887905},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1717160887904},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1717160887905},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1717160887914},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1717160887915},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1717160887916},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1717160887917},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"fb61d936db040f0cdd960ef4e330d0a6c545ed9d","modified":1717160887916},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1717160887917},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1717160887917},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1717160887932},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1717160887956},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1717160887957},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1717160887933},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1717160887948},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1717160887949},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1717160887935},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1717160887945},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1717160887950},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"34e3bf07d14f05ccf14716063b969b792f925b58","modified":1717160887945},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1717160887947},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1717160887947},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1717160887950},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1717160887948},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1717160887955},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1717160887952},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1717160887953},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1717160887953},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"8cec4b3682a33585ff2e10fade0c6d38772c6469","modified":1717160887954},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1717160887934},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1717160887954},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1717160887951},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1717160887936},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1717160887937},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1717160887936},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1717160887938},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1717160887938},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"5563abb10a40e2f8ece8e521763fe67c6e6bc12b","modified":1717160887940},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1717160887940},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1717160887942},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1717160887939},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1717160887942},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1717160887941},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1717160887942},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1717160887944},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1717160887943},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1717160887943},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1717160887944},{"_id":"themes/fluid/source/img/avatar.jpg","hash":"9fc7ba7e22a3799a92fa2c9b7c006a9db20a52b5","modified":1717160887963},{"_id":"themes/fluid/source/img/2.jpg","hash":"d87751ddcaceaa03fa801df35b29458e7e5eb8f7","modified":1717160887961},{"_id":"themes/fluid/source/img/Szy.png","hash":"38b778225a3b29a70895b3edc8e3463b3f0227a4","modified":1717160887962},{"_id":"themes/fluid/source/img/wechat.jpg","hash":"4aa4feb572e008d98add656fd4b4aff287ff55be","modified":1717160887974},{"_id":"themes/fluid/source/img/elysia.jpg","hash":"f78f076478f24476862c82da5ad72b2a761a04e8","modified":1717160887969},{"_id":"public/local-search.xml","hash":"0737d457c20ef3747d196ac618463cf627dd414a","modified":1717164583173},{"_id":"public/about/index.html","hash":"37f86a235717628985c0e0e5ca6106ed7f2d1400","modified":1717164583173},{"_id":"public/archives/index.html","hash":"4fcff4099445507b4f02c8560e0007e49c2a9172","modified":1717164583173},{"_id":"public/archives/2024/index.html","hash":"c293a0b9e15a8a0648121e13749df08184eda870","modified":1717164583173},{"_id":"public/archives/2024/05/index.html","hash":"d6429758918df5153cced66d4f1ff198f66736b4","modified":1717164583173},{"_id":"public/categories/人工智能应用/index.html","hash":"bace878ca7011f447f72d772683dc7ce681e235a","modified":1717164583173},{"_id":"public/categories/git/index.html","hash":"135724f51f5ed786478efc78f6ebc63d023609ff","modified":1717164583173},{"_id":"public/categories/算法/index.html","hash":"d1d075db2481798fbb4dd9981de742123f2e2bb1","modified":1717164583173},{"_id":"public/categories/计算机网络/index.html","hash":"d73ced536fbdc10765e5649777628c41185d2527","modified":1717164583173},{"_id":"public/tags/ai换脸/index.html","hash":"114bf5a581e1b5c18947c93c00ca80e9ce3c3fc9","modified":1717164583173},{"_id":"public/tags/小技巧/index.html","hash":"9007909e69adfe9b4679b2f4c1753e613c19ff90","modified":1717164583173},{"_id":"public/tags/js/index.html","hash":"a2d178ab70e73bc97470c9a053cbe65760ab24fd","modified":1717164583173},{"_id":"public/tags/py/index.html","hash":"f414145906b474dff847abd039a8685b5c5c3163","modified":1717164583173},{"_id":"public/tags/逆向/index.html","hash":"e7ac0778be63afab54b8f998d85ba1fef541b22f","modified":1717164583173},{"_id":"public/tags/计算机网络/index.html","hash":"e4bb0e854c7d5223f56f86245b662b6a19dc00fa","modified":1717164583173},{"_id":"public/tags/运算符重载/index.html","hash":"3f3842fcbfac976c4d0db1d1b96d6dbc0c250b77","modified":1717164583173},{"_id":"public/404.html","hash":"a855d2d2f6ded25e70fb1dcd3280007b7863033c","modified":1717164583173},{"_id":"public/tags/index.html","hash":"d0ea7af51ebd8c884df05865c1504a539178ab34","modified":1717164583173},{"_id":"public/links/index.html","hash":"3c8b43f0137d6cf3f6faf57e4bc52eef24434696","modified":1717164583173},{"_id":"public/2024/05/31/矩阵快速幂/index.html","hash":"b27d1f875df13c32bbb889e4711412dd13a295a0","modified":1717164583173},{"_id":"public/2024/05/31/运算符重载/index.html","hash":"56af6a04800f33578245a9e773143eac89abe4e9","modified":1717164583173},{"_id":"public/2024/05/31/我的计算机网络/index.html","hash":"1ec1fd976a33c1d4b2d94c7197a1770a832c4415","modified":1717164583173},{"_id":"public/2024/05/31/小技巧-求区间奇数个数/index.html","hash":"1c8d5d409dfd2b0a15f1a99be4ce679b7edd6a7e","modified":1717164583173},{"_id":"public/2024/05/31/一键直播视频图片换脸/index.html","hash":"c370cb49f7fd56361bdd058007645f15e11cd8ab","modified":1717164583173},{"_id":"public/2024/05/31/小技巧-/index.html","hash":"358995a1de8b3f799a0239ba5337fc8ef13528d7","modified":1717164583173},{"_id":"public/2024/05/31/git使用/index.html","hash":"90e7719e6413ab5d88e9097beb128b74a15548a7","modified":1717164583173},{"_id":"public/2024/05/31/js一/index.html","hash":"aba48882ae0a7655609452b82c2b1f0748eb9879","modified":1717164583173},{"_id":"public/index.html","hash":"09aefc2f9dce037126524d134ece4dd42567b882","modified":1717164583173},{"_id":"public/categories/index.html","hash":"3dbcc1fd11841ff5b481e7b66c7e8040bb90cea9","modified":1717164583173},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1717164583173},{"_id":"public/img/1.jpg","hash":"74e1aece267d285de315bb5cec54ff02016a9230","modified":1717164583173},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1717164583173},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1717164583173},{"_id":"public/img/smh.jpg","hash":"bf7ad126e88766b8da34f9af58190f5e78582296","modified":1717164583173},{"_id":"public/assets/js/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1717164583173},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1717164583173},{"_id":"public/assets/css/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1717164583173},{"_id":"public/assets/js/Meting.min.js","hash":"5e3fda3405bf0ff3a8323613bd91df7d9dbe8a1f","modified":1717164583173},{"_id":"public/img/2.jpg","hash":"d87751ddcaceaa03fa801df35b29458e7e5eb8f7","modified":1717164583173},{"_id":"public/img/Szy.png","hash":"38b778225a3b29a70895b3edc8e3463b3f0227a4","modified":1717164583173},{"_id":"public/img/avatar.jpg","hash":"9fc7ba7e22a3799a92fa2c9b7c006a9db20a52b5","modified":1717164583173},{"_id":"public/img/wechat.jpg","hash":"4aa4feb572e008d98add656fd4b4aff287ff55be","modified":1717164583173},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1717164583173},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1717164583173},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1717164583173},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1717164583173},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1717164583173},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1717164583173},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1717164583173},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1717164583173},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1717164583173},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1717164583173},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1717164583173},{"_id":"public/css/main.css","hash":"ad76d9109aa2f2fca21fb2800fe70c674d8938a0","modified":1717164583173},{"_id":"public/img/elysia.jpg","hash":"f78f076478f24476862c82da5ad72b2a761a04e8","modified":1717164583173}],"Category":[{"name":"人工智能应用","_id":"clwurggnc0003fgjfhthj3hfx"},{"name":"git","_id":"clwurggnh0008fgjfbmmj4569"},{"name":"算法","_id":"clwurggnj000efgjf2ihycbl9"},{"name":"计算机网络","_id":"clwurggnl000lfgjf6qd78uvp"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\n---\n\n","date":"2024-05-31T13:20:28.874Z","updated":"2024-05-31T13:08:07.864Z","path":"about/index.html","comments":1,"_id":"clwurggn90001fgjf0mly7ngy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"一键视频直播图片换脸","math":true,"_content":"\n\n\n# 前言\n\n上周脑子里就有很多关于ai换脸的想法（很大胆的想法），放假回家之后马上开始寻找实现的方法，然后就发现了它：faceswap\n\n非常简单上手的一款ai换脸软件。\n\n<!--more-->\n\n# 下载与安装\n\n连接：https://swapface.org/\n\n目前只有windows版本点击下载即可\n\n下载后是一个.exe的安装程序\n\n双击打开后选择合适位置安装\n\n# 使用\n\n支持一键视频人脸替换，图片人脸替换和直播换脸\n\n打开软件后需要先注册一个账号\n\n每日免费上传十张照片 和生成十个视频 感觉差不多够用\n\n<s>不够用再注册账号嘛</s>\n\n然后介绍视频换脸\n\n## video faceswap\n\n![image-20240112181835117](https://www.freeimg.cn/i/2024/01/12/65a11298888ba.png)\n\n上方内置了四个视频作为被替换的视频右侧是需要替换成的人脸，可以自己上传图片。\n\n左侧是选择一个视频，当视频中出现多个人脸时会让你选择被替换的人脸![image-20240112180423160](https://www.freeimg.cn/i/2024/01/12/65a11293b6acd.png)\n\n随后再右侧点击需要替换成的人脸图片就完成了准备工作\n\n下方显示![image-20240112180555420](https://www.freeimg.cn/i/2024/01/12/65a11293d2ad0.png)\n\n我们可以同时替换多个人脸。\n\n软件提供了四种替换模式。\n\n![https](https://www.freeimg.cn/i/2024/01/12/65a1129271a27.png)\n\n快速模式顾名思义--快<s>但是效果差点</s>\n\n专业模式--没用过，应该是慢点效果好点\n\n专家模式-- 慢但是效果好\n\n混合模式-- 没用过 应该是上面模式混合使用？？\n\n最后点击start就开始了视频的替换\n\n我自己用amd显卡快速模式一分三十秒的视频大概跑十几分钟 \n\n专家模式要上跑一个小时。\n\n## stream faceswap\n\n![image-20240112180110273](https://www.freeimg.cn/i/2024/01/12/65a11298edc9c.png)\n\n需要在右侧选择摄像头和大小，下方选择替换的人脸图片，也可自行添加自己想要的人脸图片\n\n## image faceswap\n\n![image-20240112181134924](https://www.freeimg.cn/i/2024/01/12/65a11299ee8c6.png)\n\n同样的左侧是待替换照片，右侧是需要替换成的人脸照片 ，上传图片后选择人脸。选择模式后就开始替换了。\n","source":"_posts/一键直播视频图片换脸.md","raw":"---\ntitle: 一键视频直播图片换脸\ncategories: \n- 人工智能应用\ntags: \n- ai换脸\nmath: true\n---\n\n\n\n# 前言\n\n上周脑子里就有很多关于ai换脸的想法（很大胆的想法），放假回家之后马上开始寻找实现的方法，然后就发现了它：faceswap\n\n非常简单上手的一款ai换脸软件。\n\n<!--more-->\n\n# 下载与安装\n\n连接：https://swapface.org/\n\n目前只有windows版本点击下载即可\n\n下载后是一个.exe的安装程序\n\n双击打开后选择合适位置安装\n\n# 使用\n\n支持一键视频人脸替换，图片人脸替换和直播换脸\n\n打开软件后需要先注册一个账号\n\n每日免费上传十张照片 和生成十个视频 感觉差不多够用\n\n<s>不够用再注册账号嘛</s>\n\n然后介绍视频换脸\n\n## video faceswap\n\n![image-20240112181835117](https://www.freeimg.cn/i/2024/01/12/65a11298888ba.png)\n\n上方内置了四个视频作为被替换的视频右侧是需要替换成的人脸，可以自己上传图片。\n\n左侧是选择一个视频，当视频中出现多个人脸时会让你选择被替换的人脸![image-20240112180423160](https://www.freeimg.cn/i/2024/01/12/65a11293b6acd.png)\n\n随后再右侧点击需要替换成的人脸图片就完成了准备工作\n\n下方显示![image-20240112180555420](https://www.freeimg.cn/i/2024/01/12/65a11293d2ad0.png)\n\n我们可以同时替换多个人脸。\n\n软件提供了四种替换模式。\n\n![https](https://www.freeimg.cn/i/2024/01/12/65a1129271a27.png)\n\n快速模式顾名思义--快<s>但是效果差点</s>\n\n专业模式--没用过，应该是慢点效果好点\n\n专家模式-- 慢但是效果好\n\n混合模式-- 没用过 应该是上面模式混合使用？？\n\n最后点击start就开始了视频的替换\n\n我自己用amd显卡快速模式一分三十秒的视频大概跑十几分钟 \n\n专家模式要上跑一个小时。\n\n## stream faceswap\n\n![image-20240112180110273](https://www.freeimg.cn/i/2024/01/12/65a11298edc9c.png)\n\n需要在右侧选择摄像头和大小，下方选择替换的人脸图片，也可自行添加自己想要的人脸图片\n\n## image faceswap\n\n![image-20240112181134924](https://www.freeimg.cn/i/2024/01/12/65a11299ee8c6.png)\n\n同样的左侧是待替换照片，右侧是需要替换成的人脸照片 ，上传图片后选择人脸。选择模式后就开始替换了。\n","slug":"一键直播视频图片换脸","published":1,"date":"2024-05-31T13:08:07.861Z","updated":"2024-05-31T13:08:07.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggn40000fgjffyie31y2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"前言\">前言</h1>\r\n<p>上周脑子里就有很多关于ai换脸的想法（很大胆的想法），放假回家之后马上开始寻找实现的方法，然后就发现了它：faceswap</p>\r\n<p>非常简单上手的一款ai换脸软件。</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"下载与安装\">下载与安装</h1>\r\n<p>连接：https://swapface.org/</p>\r\n<p>目前只有windows版本点击下载即可</p>\r\n<p>下载后是一个.exe的安装程序</p>\r\n<p>双击打开后选择合适位置安装</p>\r\n<h1 id=\"使用\">使用</h1>\r\n<p>支持一键视频人脸替换，图片人脸替换和直播换脸</p>\r\n<p>打开软件后需要先注册一个账号</p>\r\n<p>每日免费上传十张照片 和生成十个视频 感觉差不多够用</p>\r\n<p><s>不够用再注册账号嘛</s></p>\r\n<p>然后介绍视频换脸</p>\r\n<h2 id=\"video-faceswap\">video faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11298888ba.png\"\r\nalt=\"image-20240112181835117\" />\r\n<figcaption aria-hidden=\"true\">image-20240112181835117</figcaption>\r\n</figure>\r\n<p>上方内置了四个视频作为被替换的视频右侧是需要替换成的人脸，可以自己上传图片。</p>\r\n<p>左侧是选择一个视频，当视频中出现多个人脸时会让你选择被替换的人脸<img\r\nsrc=\"https://www.freeimg.cn/i/2024/01/12/65a11293b6acd.png\"\r\nalt=\"image-20240112180423160\" /></p>\r\n<p>随后再右侧点击需要替换成的人脸图片就完成了准备工作</p>\r\n<p>下方显示<img\r\nsrc=\"https://www.freeimg.cn/i/2024/01/12/65a11293d2ad0.png\"\r\nalt=\"image-20240112180555420\" /></p>\r\n<p>我们可以同时替换多个人脸。</p>\r\n<p>软件提供了四种替换模式。</p>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a1129271a27.png\"\r\nalt=\"https\" />\r\n<figcaption aria-hidden=\"true\">https</figcaption>\r\n</figure>\r\n<p>快速模式顾名思义--快<s>但是效果差点</s></p>\r\n<p>专业模式--没用过，应该是慢点效果好点</p>\r\n<p>专家模式-- 慢但是效果好</p>\r\n<p>混合模式-- 没用过 应该是上面模式混合使用？？</p>\r\n<p>最后点击start就开始了视频的替换</p>\r\n<p>我自己用amd显卡快速模式一分三十秒的视频大概跑十几分钟</p>\r\n<p>专家模式要上跑一个小时。</p>\r\n<h2 id=\"stream-faceswap\">stream faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11298edc9c.png\"\r\nalt=\"image-20240112180110273\" />\r\n<figcaption aria-hidden=\"true\">image-20240112180110273</figcaption>\r\n</figure>\r\n<p>需要在右侧选择摄像头和大小，下方选择替换的人脸图片，也可自行添加自己想要的人脸图片</p>\r\n<h2 id=\"image-faceswap\">image faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11299ee8c6.png\"\r\nalt=\"image-20240112181134924\" />\r\n<figcaption aria-hidden=\"true\">image-20240112181134924</figcaption>\r\n</figure>\r\n<p>同样的左侧是待替换照片，右侧是需要替换成的人脸照片\r\n，上传图片后选择人脸。选择模式后就开始替换了。</p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\">前言</h1>\r\n<p>上周脑子里就有很多关于ai换脸的想法（很大胆的想法），放假回家之后马上开始寻找实现的方法，然后就发现了它：faceswap</p>\r\n<p>非常简单上手的一款ai换脸软件。</p>","more":"<h1 id=\"下载与安装\">下载与安装</h1>\r\n<p>连接：https://swapface.org/</p>\r\n<p>目前只有windows版本点击下载即可</p>\r\n<p>下载后是一个.exe的安装程序</p>\r\n<p>双击打开后选择合适位置安装</p>\r\n<h1 id=\"使用\">使用</h1>\r\n<p>支持一键视频人脸替换，图片人脸替换和直播换脸</p>\r\n<p>打开软件后需要先注册一个账号</p>\r\n<p>每日免费上传十张照片 和生成十个视频 感觉差不多够用</p>\r\n<p><s>不够用再注册账号嘛</s></p>\r\n<p>然后介绍视频换脸</p>\r\n<h2 id=\"video-faceswap\">video faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11298888ba.png\"\r\nalt=\"image-20240112181835117\" />\r\n<figcaption aria-hidden=\"true\">image-20240112181835117</figcaption>\r\n</figure>\r\n<p>上方内置了四个视频作为被替换的视频右侧是需要替换成的人脸，可以自己上传图片。</p>\r\n<p>左侧是选择一个视频，当视频中出现多个人脸时会让你选择被替换的人脸<img\r\nsrc=\"https://www.freeimg.cn/i/2024/01/12/65a11293b6acd.png\"\r\nalt=\"image-20240112180423160\" /></p>\r\n<p>随后再右侧点击需要替换成的人脸图片就完成了准备工作</p>\r\n<p>下方显示<img\r\nsrc=\"https://www.freeimg.cn/i/2024/01/12/65a11293d2ad0.png\"\r\nalt=\"image-20240112180555420\" /></p>\r\n<p>我们可以同时替换多个人脸。</p>\r\n<p>软件提供了四种替换模式。</p>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a1129271a27.png\"\r\nalt=\"https\" />\r\n<figcaption aria-hidden=\"true\">https</figcaption>\r\n</figure>\r\n<p>快速模式顾名思义--快<s>但是效果差点</s></p>\r\n<p>专业模式--没用过，应该是慢点效果好点</p>\r\n<p>专家模式-- 慢但是效果好</p>\r\n<p>混合模式-- 没用过 应该是上面模式混合使用？？</p>\r\n<p>最后点击start就开始了视频的替换</p>\r\n<p>我自己用amd显卡快速模式一分三十秒的视频大概跑十几分钟</p>\r\n<p>专家模式要上跑一个小时。</p>\r\n<h2 id=\"stream-faceswap\">stream faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11298edc9c.png\"\r\nalt=\"image-20240112180110273\" />\r\n<figcaption aria-hidden=\"true\">image-20240112180110273</figcaption>\r\n</figure>\r\n<p>需要在右侧选择摄像头和大小，下方选择替换的人脸图片，也可自行添加自己想要的人脸图片</p>\r\n<h2 id=\"image-faceswap\">image faceswap</h2>\r\n<figure>\r\n<img src=\"https://www.freeimg.cn/i/2024/01/12/65a11299ee8c6.png\"\r\nalt=\"image-20240112181134924\" />\r\n<figcaption aria-hidden=\"true\">image-20240112181134924</figcaption>\r\n</figure>\r\n<p>同样的左侧是待替换照片，右侧是需要替换成的人脸照片\r\n，上传图片后选择人脸。选择模式后就开始替换了。</p>"},{"title":"git快速上手","_content":"\n\n## 什么是git\n\n*Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。*\n\n<s>用于和小伙伴们一起整个大活</s>\n\n<!--more-->\n\n## git安装配置\n\n安装这个资源太多了，俺也是新手俺就不献丑了\n\ngit工作流程\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n## git创建仓库\n\n使用\n\n```\ngit init [name]\n```\n\n在当前目录下创建一个名为name 的仓库\n\n如果不加name 会以当前目录作为仓库\n\n始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n\n```\ngit add 123.c\ngit add README\ngit commit -m ”first“ //不加-m参数会打开vim详细编辑ti'jiao说明\n```\n\n```\ngit add * //跟踪全部文件\n```\n\n### git clone\n\n```\ngit clone <repo>\n```\n\n克隆一个仓库到本地仓库\n\n## git基本操作\n\n### git remote\n\n远程仓库操作\n\n- `git remote`：列出当前仓库中已配置的远程仓库。\n- `git remote add <remote_name> <remote_url>`：添加一个新的远程仓库。指定一个远程仓库的名称和 URL，将其添加到当前仓库中。\n- git remote show [remote]  显示某个远程仓库信息\n\n### 提交远程仓库\n\n```\ngit push <远程主机名> <本地分支名>:<远程分支名> \n```\n\n本地与远程分支相同可以省略冒号\n\n## git 分支管理\n\n创建分支命令：\n\n```\ngit branch (branchname)\n```\n\n切换分支命令:\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n\n合并分支命令:\n\n```\ngit merge \n```\n\n列出分支基本命令：\n\n```\ngit branch\n```\n\n## 查看提交历史\n\ngit log\n","source":"_posts/git使用.md","raw":"---\ntitle: git快速上手\ncategories: \n- git\n\n\n---\n\n\n## 什么是git\n\n*Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。*\n\n<s>用于和小伙伴们一起整个大活</s>\n\n<!--more-->\n\n## git安装配置\n\n安装这个资源太多了，俺也是新手俺就不献丑了\n\ngit工作流程\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n## git创建仓库\n\n使用\n\n```\ngit init [name]\n```\n\n在当前目录下创建一个名为name 的仓库\n\n如果不加name 会以当前目录作为仓库\n\n始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n\n```\ngit add 123.c\ngit add README\ngit commit -m ”first“ //不加-m参数会打开vim详细编辑ti'jiao说明\n```\n\n```\ngit add * //跟踪全部文件\n```\n\n### git clone\n\n```\ngit clone <repo>\n```\n\n克隆一个仓库到本地仓库\n\n## git基本操作\n\n### git remote\n\n远程仓库操作\n\n- `git remote`：列出当前仓库中已配置的远程仓库。\n- `git remote add <remote_name> <remote_url>`：添加一个新的远程仓库。指定一个远程仓库的名称和 URL，将其添加到当前仓库中。\n- git remote show [remote]  显示某个远程仓库信息\n\n### 提交远程仓库\n\n```\ngit push <远程主机名> <本地分支名>:<远程分支名> \n```\n\n本地与远程分支相同可以省略冒号\n\n## git 分支管理\n\n创建分支命令：\n\n```\ngit branch (branchname)\n```\n\n切换分支命令:\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n\n合并分支命令:\n\n```\ngit merge \n```\n\n列出分支基本命令：\n\n```\ngit branch\n```\n\n## 查看提交历史\n\ngit log\n","slug":"git使用","published":1,"date":"2024-05-31T13:08:07.860Z","updated":"2024-05-31T13:08:07.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggna0002fgjfbnge4y9e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"什么是git\">什么是git</h2>\r\n<p><em>Git\r\n是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</em></p>\r\n<p><s>用于和小伙伴们一起整个大活</s></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"git安装配置\">git安装配置</h2>\r\n<p>安装这个资源太多了，俺也是新手俺就不献丑了</p>\r\n<p>git工作流程</p>\r\n<ul>\r\n<li>克隆 Git 资源作为工作目录。</li>\r\n<li>在克隆的资源上添加或修改文件。</li>\r\n<li>如果其他人修改了，你可以更新资源。</li>\r\n<li>在提交前查看修改。</li>\r\n<li>提交修改。</li>\r\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\r\n</ul>\r\n<h2 id=\"git创建仓库\">git创建仓库</h2>\r\n<p>使用</p>\r\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">git</span> init<span class=\"hljs-meta\"> [name]</span><br></code></pre></td></tr></table></figure>\r\n<p>在当前目录下创建一个名为name 的仓库</p>\r\n<p>如果不加name 会以当前目录作为仓库</p>\r\n<p>始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git\r\n需要的数据和资源都存放在这个目录中。</p>\r\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉\r\nGit 开始对这些文件进行跟踪，然后提交：</p>\r\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">git <span class=\"hljs-built_in\">add</span> <span class=\"hljs-number\">123.</span>c<br>git <span class=\"hljs-built_in\">add</span> README<br>git commit -m ”<span class=\"hljs-keyword\">first</span>“<span class=\"hljs-comment\"> //不加-m参数会打开vim详细编辑ti&#x27;jiao说明</span><br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> * <span class=\"hljs-comment\">//跟踪全部文件</span><br></code></pre></td></tr></table></figure>\r\n<h3 id=\"git-clone\">git clone</h3>\r\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure>\r\n<p>克隆一个仓库到本地仓库</p>\r\n<h2 id=\"git基本操作\">git基本操作</h2>\r\n<h3 id=\"git-remote\">git remote</h3>\r\n<p>远程仓库操作</p>\r\n<ul>\r\n<li><code>git remote</code>：列出当前仓库中已配置的远程仓库。</li>\r\n<li><code>git remote add &lt;remote_name&gt; &lt;remote_url&gt;</code>：添加一个新的远程仓库。指定一个远程仓库的名称和\r\nURL，将其添加到当前仓库中。</li>\r\n<li>git remote show [remote] 显示某个远程仓库信息</li>\r\n</ul>\r\n<h3 id=\"提交远程仓库\">提交远程仓库</h3>\r\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git push <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程主机名</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">本地分支名</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程分支名</span>&gt;</span> <br></code></pre></td></tr></table></figure>\r\n<p>本地与远程分支相同可以省略冒号</p>\r\n<h2 id=\"git-分支管理\">git 分支管理</h2>\r\n<p>创建分支命令：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">git <span class=\"hljs-title function_\">branch</span> <span class=\"hljs-params\">(branchname)</span><br></code></pre></td></tr></table></figure>\r\n<p>切换分支命令:</p>\r\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">git checkout <span class=\"hljs-comment\">(branchname)</span><br></code></pre></td></tr></table></figure>\r\n<p>当你切换分支的时候，Git\r\n会用该分支的最后提交的快照替换你的工作目录的内容，\r\n所以多个分支不需要多个目录。</p>\r\n<p>合并分支命令:</p>\r\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\">git <span class=\"hljs-keyword\">merge</span> <br></code></pre></td></tr></table></figure>\r\n<p>列出分支基本命令：</p>\r\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git branch</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"查看提交历史\">查看提交历史</h2>\r\n<p>git log</p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是git\">什么是git</h2>\r\n<p><em>Git\r\n是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</em></p>\r\n<p><s>用于和小伙伴们一起整个大活</s></p>","more":"<h2 id=\"git安装配置\">git安装配置</h2>\r\n<p>安装这个资源太多了，俺也是新手俺就不献丑了</p>\r\n<p>git工作流程</p>\r\n<ul>\r\n<li>克隆 Git 资源作为工作目录。</li>\r\n<li>在克隆的资源上添加或修改文件。</li>\r\n<li>如果其他人修改了，你可以更新资源。</li>\r\n<li>在提交前查看修改。</li>\r\n<li>提交修改。</li>\r\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\r\n</ul>\r\n<h2 id=\"git创建仓库\">git创建仓库</h2>\r\n<p>使用</p>\r\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">git</span> init<span class=\"hljs-meta\"> [name]</span><br></code></pre></td></tr></table></figure>\r\n<p>在当前目录下创建一个名为name 的仓库</p>\r\n<p>如果不加name 会以当前目录作为仓库</p>\r\n<p>始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git\r\n需要的数据和资源都存放在这个目录中。</p>\r\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉\r\nGit 开始对这些文件进行跟踪，然后提交：</p>\r\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">git <span class=\"hljs-built_in\">add</span> <span class=\"hljs-number\">123.</span>c<br>git <span class=\"hljs-built_in\">add</span> README<br>git commit -m ”<span class=\"hljs-keyword\">first</span>“<span class=\"hljs-comment\"> //不加-m参数会打开vim详细编辑ti&#x27;jiao说明</span><br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> * <span class=\"hljs-comment\">//跟踪全部文件</span><br></code></pre></td></tr></table></figure>\r\n<h3 id=\"git-clone\">git clone</h3>\r\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure>\r\n<p>克隆一个仓库到本地仓库</p>\r\n<h2 id=\"git基本操作\">git基本操作</h2>\r\n<h3 id=\"git-remote\">git remote</h3>\r\n<p>远程仓库操作</p>\r\n<ul>\r\n<li><code>git remote</code>：列出当前仓库中已配置的远程仓库。</li>\r\n<li><code>git remote add &lt;remote_name&gt; &lt;remote_url&gt;</code>：添加一个新的远程仓库。指定一个远程仓库的名称和\r\nURL，将其添加到当前仓库中。</li>\r\n<li>git remote show [remote] 显示某个远程仓库信息</li>\r\n</ul>\r\n<h3 id=\"提交远程仓库\">提交远程仓库</h3>\r\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git push <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程主机名</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">本地分支名</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程分支名</span>&gt;</span> <br></code></pre></td></tr></table></figure>\r\n<p>本地与远程分支相同可以省略冒号</p>\r\n<h2 id=\"git-分支管理\">git 分支管理</h2>\r\n<p>创建分支命令：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">git <span class=\"hljs-title function_\">branch</span> <span class=\"hljs-params\">(branchname)</span><br></code></pre></td></tr></table></figure>\r\n<p>切换分支命令:</p>\r\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">git checkout <span class=\"hljs-comment\">(branchname)</span><br></code></pre></td></tr></table></figure>\r\n<p>当你切换分支的时候，Git\r\n会用该分支的最后提交的快照替换你的工作目录的内容，\r\n所以多个分支不需要多个目录。</p>\r\n<p>合并分支命令:</p>\r\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\">git <span class=\"hljs-keyword\">merge</span> <br></code></pre></td></tr></table></figure>\r\n<p>列出分支基本命令：</p>\r\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git branch</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"查看提交历史\">查看提交历史</h2>\r\n<p>git log</p>"},{"title":"小技巧-寻找区间未出现的最小非负整数","math":true,"_content":"\n\n\n\n\n\n\n关于mex：区间的mex被定义为区间中未出现的**最小的非负整数**\n\n<!-- more -->\n\n,例如：<br>\n\n- [2，2，1]的mex是0，0不在这个区间中。\n- [3，1，0，1]的mex是2，因为0，1在这个区间中2不在\n- [0，3，1，2]的mex是4，因为0，1，2，3在这个区间中而4不在\n\n输入：\n\n一串非负整数，表示数列\n\n代码：\n\n```c++\n#include<bits/stdc++.h>\nconst int N= 2e5+10;\nusing namespace std;\nint a[N];\nint main(){\n    int n;\n    cin >> n;\n    for(int i=0;i<n;i++){\n    \tcin >> a[i];\n        cnt[a[i]]++;\n    }\n    \n  \n    while(cnt[num]) num++;\n    \n    cout<< num <<'\\n'; \n    return 0;\n}\n```\n\n","source":"_posts/小技巧-.md","raw":"---\ntitle : 小技巧-寻找区间未出现的最小非负整数\ncategories: \n- 算法\ntags: \n- 小技巧\nmath : true\n---\n\n\n\n\n\n\n\n关于mex：区间的mex被定义为区间中未出现的**最小的非负整数**\n\n<!-- more -->\n\n,例如：<br>\n\n- [2，2，1]的mex是0，0不在这个区间中。\n- [3，1，0，1]的mex是2，因为0，1在这个区间中2不在\n- [0，3，1，2]的mex是4，因为0，1，2，3在这个区间中而4不在\n\n输入：\n\n一串非负整数，表示数列\n\n代码：\n\n```c++\n#include<bits/stdc++.h>\nconst int N= 2e5+10;\nusing namespace std;\nint a[N];\nint main(){\n    int n;\n    cin >> n;\n    for(int i=0;i<n;i++){\n    \tcin >> a[i];\n        cnt[a[i]]++;\n    }\n    \n  \n    while(cnt[num]) num++;\n    \n    cout<< num <<'\\n'; \n    return 0;\n}\n```\n\n","slug":"小技巧-","published":1,"date":"2024-05-31T13:08:07.861Z","updated":"2024-05-31T13:08:07.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggne0005fgjf037a2614","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>关于mex：区间的mex被定义为区间中未出现的<strong>最小的非负整数</strong></p>\r\n<span id=\"more\"></span>\r\n<p>,例如：<br></p>\r\n<ul>\r\n<li>[2，2，1]的mex是0，0不在这个区间中。</li>\r\n<li>[3，1，0，1]的mex是2，因为0，1在这个区间中2不在</li>\r\n<li>[0，3，1，2]的mex是4，因为0，1，2，3在这个区间中而4不在</li>\r\n</ul>\r\n<p>输入：</p>\r\n<p>一串非负整数，表示数列</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N= <span class=\"hljs-number\">2e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> a[N];<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>    \tcin &gt;&gt; a[i];<br>        cnt[a[i]]++;<br>    &#125;<br>    <br>  <br>    <span class=\"hljs-keyword\">while</span>(cnt[num]) num++;<br>    <br>    cout&lt;&lt; num &lt;&lt;<span class=\"hljs-string\">&#x27;\\n&#x27;</span>; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>关于mex：区间的mex被定义为区间中未出现的<strong>最小的非负整数</strong></p>","more":"<p>,例如：<br></p>\r\n<ul>\r\n<li>[2，2，1]的mex是0，0不在这个区间中。</li>\r\n<li>[3，1，0，1]的mex是2，因为0，1在这个区间中2不在</li>\r\n<li>[0，3，1，2]的mex是4，因为0，1，2，3在这个区间中而4不在</li>\r\n</ul>\r\n<p>输入：</p>\r\n<p>一串非负整数，表示数列</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N= <span class=\"hljs-number\">2e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> a[N];<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>    \tcin &gt;&gt; a[i];<br>        cnt[a[i]]++;<br>    &#125;<br>    <br>  <br>    <span class=\"hljs-keyword\">while</span>(cnt[num]) num++;<br>    <br>    cout&lt;&lt; num &lt;&lt;<span class=\"hljs-string\">&#x27;\\n&#x27;</span>; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"js逆向（其一）","_content":"\n前两周一直在填鸭式的补框架快速过视频和案例，整个人非常麻木啊，于是想开个新坑也作为一项特长发展一下，数了数为数不多的会的东西，发现爬虫这里有些意思准备发掘一下，还能和专业互补。于是决定学习一下前端的逆向\n\n<!--more-->\n\n\n\n## python中如何运行js\n\n那么为什么要把js放本地来运行呢？\n\n* 首先是方便阅读代码，逆向这个东西不像开发写给人看，是给机器看的，难免就人看不太懂，生成的东西往往是原始的机器码、汇编代码或中间表示形式，可以利用python作为高级编程语言的特性进行代码重构，有助于快速理解逻辑。\n* 其次py是一种广泛使用的，易上手的编程语言，第三方库丰富功能强大，可以自动化的进行一些操作便于批量分析，提高效率\n* Python在逆向工程社区中有广泛的使用和丰富的资源。有许多专门针对逆向工程的Python库、框架和工具。\n\n## py中调用js的库\n\n* pyv8\n  * v8是google的开源js引擎，pyv8是对它的python层包装可以直接调用v8执行js代码<s>年久失修</s>\n\n* js2py\n  * 纯python实现的js解析器和翻译器它更新到了19年<s>性能不高，bug不修</s>\n\n* pyexecjs\n  * 移植自Ruby\n  * 执行js的引擎可自选，但一般都使用nodejs\n  * 缺点是执行大型js有点慢，特殊的输入输出会报错（输入输出参数编码一下）\n\n* PyMiniRacer\n  * 包装v8\n  * 新\n\n## 安装库\n\n### 安装py库\n\n```python\npip install pyexecjs\n```\n\n###  安装js环境\n\n安装NodeJs\n\n\n\n### 检测安装是成功\n\n```python\nimport execjs\nexecjs.get().name()\n```\n\n出现\n\n> Node.js(V8)\n\n就成功了\n\n## 简单来个案例\n\n运行一行js代码\n\n```python\nimport execjs as js\n\njs.eval(\"a = new Array(1,2,3)\")\n```\n\n没报错就成功 \t\n\n但是肯定不会这样一行一行进行执行\n\n接下来介绍一个新的方式执行js代码\n\n## 解析字符串运行代码\n\n```python\nimport execjs as js\n\n\njstext = '''\nfunction hello(str){return str;}\n'''\nres = js.compile(jstext)\na = res.call(\"hello\",\"helloword\")\nprint(a)\n```\n\n","source":"_posts/js一.md","raw":"---\ntitle: js逆向（其一）\ntags:\n- js\n- py\n- 逆向\n\n---\n\n前两周一直在填鸭式的补框架快速过视频和案例，整个人非常麻木啊，于是想开个新坑也作为一项特长发展一下，数了数为数不多的会的东西，发现爬虫这里有些意思准备发掘一下，还能和专业互补。于是决定学习一下前端的逆向\n\n<!--more-->\n\n\n\n## python中如何运行js\n\n那么为什么要把js放本地来运行呢？\n\n* 首先是方便阅读代码，逆向这个东西不像开发写给人看，是给机器看的，难免就人看不太懂，生成的东西往往是原始的机器码、汇编代码或中间表示形式，可以利用python作为高级编程语言的特性进行代码重构，有助于快速理解逻辑。\n* 其次py是一种广泛使用的，易上手的编程语言，第三方库丰富功能强大，可以自动化的进行一些操作便于批量分析，提高效率\n* Python在逆向工程社区中有广泛的使用和丰富的资源。有许多专门针对逆向工程的Python库、框架和工具。\n\n## py中调用js的库\n\n* pyv8\n  * v8是google的开源js引擎，pyv8是对它的python层包装可以直接调用v8执行js代码<s>年久失修</s>\n\n* js2py\n  * 纯python实现的js解析器和翻译器它更新到了19年<s>性能不高，bug不修</s>\n\n* pyexecjs\n  * 移植自Ruby\n  * 执行js的引擎可自选，但一般都使用nodejs\n  * 缺点是执行大型js有点慢，特殊的输入输出会报错（输入输出参数编码一下）\n\n* PyMiniRacer\n  * 包装v8\n  * 新\n\n## 安装库\n\n### 安装py库\n\n```python\npip install pyexecjs\n```\n\n###  安装js环境\n\n安装NodeJs\n\n\n\n### 检测安装是成功\n\n```python\nimport execjs\nexecjs.get().name()\n```\n\n出现\n\n> Node.js(V8)\n\n就成功了\n\n## 简单来个案例\n\n运行一行js代码\n\n```python\nimport execjs as js\n\njs.eval(\"a = new Array(1,2,3)\")\n```\n\n没报错就成功 \t\n\n但是肯定不会这样一行一行进行执行\n\n接下来介绍一个新的方式执行js代码\n\n## 解析字符串运行代码\n\n```python\nimport execjs as js\n\n\njstext = '''\nfunction hello(str){return str;}\n'''\nres = js.compile(jstext)\na = res.call(\"hello\",\"helloword\")\nprint(a)\n```\n\n","slug":"js一","published":1,"date":"2024-05-31T13:08:07.860Z","updated":"2024-05-31T13:08:07.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggnf0006fgjfhr9ug5rl","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>前两周一直在填鸭式的补框架快速过视频和案例，整个人非常麻木啊，于是想开个新坑也作为一项特长发展一下，数了数为数不多的会的东西，发现爬虫这里有些意思准备发掘一下，还能和专业互补。于是决定学习一下前端的逆向</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"python中如何运行js\">python中如何运行js</h2>\r\n<p>那么为什么要把js放本地来运行呢？</p>\r\n<ul>\r\n<li>首先是方便阅读代码，逆向这个东西不像开发写给人看，是给机器看的，难免就人看不太懂，生成的东西往往是原始的机器码、汇编代码或中间表示形式，可以利用python作为高级编程语言的特性进行代码重构，有助于快速理解逻辑。</li>\r\n<li>其次py是一种广泛使用的，易上手的编程语言，第三方库丰富功能强大，可以自动化的进行一些操作便于批量分析，提高效率</li>\r\n<li>Python在逆向工程社区中有广泛的使用和丰富的资源。有许多专门针对逆向工程的Python库、框架和工具。</li>\r\n</ul>\r\n<h2 id=\"py中调用js的库\">py中调用js的库</h2>\r\n<ul>\r\n<li>pyv8\r\n<ul>\r\n<li>v8是google的开源js引擎，pyv8是对它的python层包装可以直接调用v8执行js代码<s>年久失修</s></li>\r\n</ul></li>\r\n<li>js2py\r\n<ul>\r\n<li>纯python实现的js解析器和翻译器它更新到了19年<s>性能不高，bug不修</s></li>\r\n</ul></li>\r\n<li>pyexecjs\r\n<ul>\r\n<li>移植自Ruby</li>\r\n<li>执行js的引擎可自选，但一般都使用nodejs</li>\r\n<li>缺点是执行大型js有点慢，特殊的输入输出会报错（输入输出参数编码一下）</li>\r\n</ul></li>\r\n<li>PyMiniRacer\r\n<ul>\r\n<li>包装v8</li>\r\n<li>新</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"安装库\">安装库</h2>\r\n<h3 id=\"安装py库\">安装py库</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">pip install pyexecjs<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"安装js环境\">安装js环境</h3>\r\n<p>安装NodeJs</p>\r\n<h3 id=\"检测安装是成功\">检测安装是成功</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs<br>execjs.get().name()<br></code></pre></td></tr></table></figure>\r\n<p>出现</p>\r\n<blockquote>\r\n<p>Node.js(V8)</p>\r\n</blockquote>\r\n<p>就成功了</p>\r\n<h2 id=\"简单来个案例\">简单来个案例</h2>\r\n<p>运行一行js代码</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs <span class=\"hljs-keyword\">as</span> js<br><br>js.<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">&quot;a = new Array(1,2,3)&quot;</span>)<br></code></pre></td></tr></table></figure>\r\n<p>没报错就成功</p>\r\n<p>但是肯定不会这样一行一行进行执行</p>\r\n<p>接下来介绍一个新的方式执行js代码</p>\r\n<h2 id=\"解析字符串运行代码\">解析字符串运行代码</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs <span class=\"hljs-keyword\">as</span> js<br><br><br>jstext = <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">function hello(str)&#123;return str;&#125;</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br>res = js.<span class=\"hljs-built_in\">compile</span>(jstext)<br>a = res.call(<span class=\"hljs-string\">&quot;hello&quot;</span>,<span class=\"hljs-string\">&quot;helloword&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(a)<br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>前两周一直在填鸭式的补框架快速过视频和案例，整个人非常麻木啊，于是想开个新坑也作为一项特长发展一下，数了数为数不多的会的东西，发现爬虫这里有些意思准备发掘一下，还能和专业互补。于是决定学习一下前端的逆向</p>","more":"<h2 id=\"python中如何运行js\">python中如何运行js</h2>\r\n<p>那么为什么要把js放本地来运行呢？</p>\r\n<ul>\r\n<li>首先是方便阅读代码，逆向这个东西不像开发写给人看，是给机器看的，难免就人看不太懂，生成的东西往往是原始的机器码、汇编代码或中间表示形式，可以利用python作为高级编程语言的特性进行代码重构，有助于快速理解逻辑。</li>\r\n<li>其次py是一种广泛使用的，易上手的编程语言，第三方库丰富功能强大，可以自动化的进行一些操作便于批量分析，提高效率</li>\r\n<li>Python在逆向工程社区中有广泛的使用和丰富的资源。有许多专门针对逆向工程的Python库、框架和工具。</li>\r\n</ul>\r\n<h2 id=\"py中调用js的库\">py中调用js的库</h2>\r\n<ul>\r\n<li>pyv8\r\n<ul>\r\n<li>v8是google的开源js引擎，pyv8是对它的python层包装可以直接调用v8执行js代码<s>年久失修</s></li>\r\n</ul></li>\r\n<li>js2py\r\n<ul>\r\n<li>纯python实现的js解析器和翻译器它更新到了19年<s>性能不高，bug不修</s></li>\r\n</ul></li>\r\n<li>pyexecjs\r\n<ul>\r\n<li>移植自Ruby</li>\r\n<li>执行js的引擎可自选，但一般都使用nodejs</li>\r\n<li>缺点是执行大型js有点慢，特殊的输入输出会报错（输入输出参数编码一下）</li>\r\n</ul></li>\r\n<li>PyMiniRacer\r\n<ul>\r\n<li>包装v8</li>\r\n<li>新</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"安装库\">安装库</h2>\r\n<h3 id=\"安装py库\">安装py库</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">pip install pyexecjs<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"安装js环境\">安装js环境</h3>\r\n<p>安装NodeJs</p>\r\n<h3 id=\"检测安装是成功\">检测安装是成功</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs<br>execjs.get().name()<br></code></pre></td></tr></table></figure>\r\n<p>出现</p>\r\n<blockquote>\r\n<p>Node.js(V8)</p>\r\n</blockquote>\r\n<p>就成功了</p>\r\n<h2 id=\"简单来个案例\">简单来个案例</h2>\r\n<p>运行一行js代码</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs <span class=\"hljs-keyword\">as</span> js<br><br>js.<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">&quot;a = new Array(1,2,3)&quot;</span>)<br></code></pre></td></tr></table></figure>\r\n<p>没报错就成功</p>\r\n<p>但是肯定不会这样一行一行进行执行</p>\r\n<p>接下来介绍一个新的方式执行js代码</p>\r\n<h2 id=\"解析字符串运行代码\">解析字符串运行代码</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> execjs <span class=\"hljs-keyword\">as</span> js<br><br><br>jstext = <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">function hello(str)&#123;return str;&#125;</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br>res = js.<span class=\"hljs-built_in\">compile</span>(jstext)<br>a = res.call(<span class=\"hljs-string\">&quot;hello&quot;</span>,<span class=\"hljs-string\">&quot;helloword&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(a)<br></code></pre></td></tr></table></figure>"},{"title":"矩阵快速幂","math":true,"_content":"\n\n\n设置矩阵`A`为$m\\times p$的矩阵，`B`为$p \\times n$的矩阵，则可有$m \\times n$的矩阵c为矩阵`A` 与`B`的乘积。\n\n例如\n$$\nC = \\left[\\begin{array}{a}\n1 & 2 & 3\\\\\n4 & 5 & 6\n\\end{array} \\right] \\times\n\\left[\\begin{array}{b}\n1&4\\\\\n2&5\\\\\n3&6\\\\\n\\end{array}\\right]\\\\\n=\n\\left[\\begin{array}{b}\n1\\times1+2\\times2+3\\times3&1\\times4+2\\times5+3\\times6\\\\\n4\\times1+5\\times2+6\\times3&4\\times4+5\\times5+6\\times6\n\\end{array}\\right]\\\\\n=\\left[\\begin{array}{b}\n14&32\\\\\n32&77\\\\\n\\end{array}\\right]\n$$\n\n接下来我们使用矩阵快速幂解决斐波那契问题\n\n我们将斐波那契数列相邻的两项表示为一个矩阵\n$$\n\\left[\\begin{array}{b}\nF_n&F_{n-1}\\\\\n\n\\end{array}\\right]\n$$\n我们希望通过$\\left[\\begin{array}{b}F_{n-1}&F_{n-2}\\\\\\end{array}\\right]$推出$\\left[\\begin{array}{b}F_{n}&F_{n-1}\\\\\\end{array}\\right]$\n\n尝试构造一个矩阵`A`使得$\\left[\\begin{array}{b}F_{n-1}&F_{n-2}\\\\\\end{array}\\right]\\times=\\left[\\begin{array}{b}F_{n}&F_{n-1}\\\\\\end{array}\\right]$。\n$$\nF_n = F_{n-1}\\times1+F_{n-2}+1\\\\\nF_{n-1} = F_{n-1}\\times1+F_{n-2}\\times0\n$$\n\n\n发现$A = \\left[\\begin{array}{b}1&1\\\\1&0\\\\\\end{array}\\right]$\n\n那么\n$$\n\\left[\\begin{array}{b}\nF_2&F_{1}\n\\end{array}\\right]\\times\n\n\\left[\\begin{array}{b}\n1&1\\\\1&0\n\\end{array}\\right]^{n-2} =\\left[\\begin{array}{b}\nF_n&F_{n-1}\\\\\n\n\\end{array}\\right]\n$$\n\n\n代码\n\n```c++\n\nusing ll = long long;\nusing namespace std;\nstruct matrix{\n\tll c[3][3];\n\tmatrix() { memset(c, 0, sizeof c); }\n}F,A;\nmatrix operator*(matrix& a, matrix& b) {\n\tmatrix t;\n\tfor (int i = 1; i <= 2; i++) {\n\t\tfor (int j = 1; j <= 2; j++) {\n\t\t\tfor (int k; k <= 2; k++) {\n\t\t\t\tt.c[i][j] = (t.c[i][j] + a.c[i][k] * b.c[k][j]) % mod;\n\t\t\t}\n\t\t}\n\t}\n\treturn t;\n}\nvoid quickpow(ll n) {\n\tF.c[1][1] = F.c[1][2] = 1;\n\tA.c[1][1] = A.c[1][2] = A.c[2][1] = 1;\n\twhile (n) {\n\t\tif (n & 1) F = F * A;\n\t\tA = A * A;\n\t\tn >>= 1;\n\t}\n}\n\n\n\n```\n\n","source":"_posts/矩阵快速幂.md","raw":"---\ntitle : 矩阵快速幂\ncategories:\n  - 算法\nmath : true\n---\n\n\n\n设置矩阵`A`为$m\\times p$的矩阵，`B`为$p \\times n$的矩阵，则可有$m \\times n$的矩阵c为矩阵`A` 与`B`的乘积。\n\n例如\n$$\nC = \\left[\\begin{array}{a}\n1 & 2 & 3\\\\\n4 & 5 & 6\n\\end{array} \\right] \\times\n\\left[\\begin{array}{b}\n1&4\\\\\n2&5\\\\\n3&6\\\\\n\\end{array}\\right]\\\\\n=\n\\left[\\begin{array}{b}\n1\\times1+2\\times2+3\\times3&1\\times4+2\\times5+3\\times6\\\\\n4\\times1+5\\times2+6\\times3&4\\times4+5\\times5+6\\times6\n\\end{array}\\right]\\\\\n=\\left[\\begin{array}{b}\n14&32\\\\\n32&77\\\\\n\\end{array}\\right]\n$$\n\n接下来我们使用矩阵快速幂解决斐波那契问题\n\n我们将斐波那契数列相邻的两项表示为一个矩阵\n$$\n\\left[\\begin{array}{b}\nF_n&F_{n-1}\\\\\n\n\\end{array}\\right]\n$$\n我们希望通过$\\left[\\begin{array}{b}F_{n-1}&F_{n-2}\\\\\\end{array}\\right]$推出$\\left[\\begin{array}{b}F_{n}&F_{n-1}\\\\\\end{array}\\right]$\n\n尝试构造一个矩阵`A`使得$\\left[\\begin{array}{b}F_{n-1}&F_{n-2}\\\\\\end{array}\\right]\\times=\\left[\\begin{array}{b}F_{n}&F_{n-1}\\\\\\end{array}\\right]$。\n$$\nF_n = F_{n-1}\\times1+F_{n-2}+1\\\\\nF_{n-1} = F_{n-1}\\times1+F_{n-2}\\times0\n$$\n\n\n发现$A = \\left[\\begin{array}{b}1&1\\\\1&0\\\\\\end{array}\\right]$\n\n那么\n$$\n\\left[\\begin{array}{b}\nF_2&F_{1}\n\\end{array}\\right]\\times\n\n\\left[\\begin{array}{b}\n1&1\\\\1&0\n\\end{array}\\right]^{n-2} =\\left[\\begin{array}{b}\nF_n&F_{n-1}\\\\\n\n\\end{array}\\right]\n$$\n\n\n代码\n\n```c++\n\nusing ll = long long;\nusing namespace std;\nstruct matrix{\n\tll c[3][3];\n\tmatrix() { memset(c, 0, sizeof c); }\n}F,A;\nmatrix operator*(matrix& a, matrix& b) {\n\tmatrix t;\n\tfor (int i = 1; i <= 2; i++) {\n\t\tfor (int j = 1; j <= 2; j++) {\n\t\t\tfor (int k; k <= 2; k++) {\n\t\t\t\tt.c[i][j] = (t.c[i][j] + a.c[i][k] * b.c[k][j]) % mod;\n\t\t\t}\n\t\t}\n\t}\n\treturn t;\n}\nvoid quickpow(ll n) {\n\tF.c[1][1] = F.c[1][2] = 1;\n\tA.c[1][1] = A.c[1][2] = A.c[2][1] = 1;\n\twhile (n) {\n\t\tif (n & 1) F = F * A;\n\t\tA = A * A;\n\t\tn >>= 1;\n\t}\n}\n\n\n\n```\n\n","slug":"矩阵快速幂","published":1,"date":"2024-05-31T13:20:34.256Z","updated":"2024-05-31T14:09:12.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggng0007fgjf1yu68lut","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>设置矩阵<code>A</code>为<span class=\"math inline\">\\(m\\times\r\np\\)</span>的矩阵，<code>B</code>为<span class=\"math inline\">\\(p \\times\r\nn\\)</span>的矩阵，则可有<span class=\"math inline\">\\(m \\times\r\nn\\)</span>的矩阵c为矩阵<code>A</code> 与<code>B</code>的乘积。</p>\r\n<p>例如 <span class=\"math display\">\\[\r\nC = \\left[\\begin{array}{a}\r\n1 &amp; 2 &amp; 3\\\\\r\n4 &amp; 5 &amp; 6\r\n\\end{array} \\right] \\times\r\n\\left[\\begin{array}{b}\r\n1&amp;4\\\\\r\n2&amp;5\\\\\r\n3&amp;6\\\\\r\n\\end{array}\\right]\\\\\r\n=\r\n\\left[\\begin{array}{b}\r\n1\\times1+2\\times2+3\\times3&amp;1\\times4+2\\times5+3\\times6\\\\\r\n4\\times1+5\\times2+6\\times3&amp;4\\times4+5\\times5+6\\times6\r\n\\end{array}\\right]\\\\\r\n=\\left[\\begin{array}{b}\r\n14&amp;32\\\\\r\n32&amp;77\\\\\r\n\\end{array}\\right]\r\n\\]</span></p>\r\n<p>接下来我们使用矩阵快速幂解决斐波那契问题</p>\r\n<p>我们将斐波那契数列相邻的两项表示为一个矩阵 $$ $$ 我们希望通过<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n-1}&amp;F_{n-2}\\\\\\end{array}\\right]\\)</span>推出<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n}&amp;F_{n-1}\\\\\\end{array}\\right]\\)</span></p>\r\n<p>尝试构造一个矩阵<code>A</code>使得<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n-1}&amp;F_{n-2}\\\\\\end{array}\\right]\\times=\\left[\\begin{array}{b}F_{n}&amp;F_{n-1}\\\\\\end{array}\\right]\\)</span>。\r\n<span class=\"math display\">\\[\r\nF_n = F_{n-1}\\times1+F_{n-2}+1\\\\\r\nF_{n-1} = F_{n-1}\\times1+F_{n-2}\\times0\r\n\\]</span></p>\r\n<p>发现<span class=\"math inline\">\\(A =\r\n\\left[\\begin{array}{b}1&amp;1\\\\1&amp;0\\\\\\end{array}\\right]\\)</span></p>\r\n<p>那么 $$ </p>\r\n<p>^{n-2} =$$</p>\r\n<p>代码</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">using</span> ll = <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">matrix</span>&#123;<br>\tll c[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">3</span>];<br>\t<span class=\"hljs-built_in\">matrix</span>() &#123; <span class=\"hljs-built_in\">memset</span>(c, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> c); &#125;<br>&#125;F,A;<br>matrix <span class=\"hljs-keyword\">operator</span>*(matrix&amp; a, matrix&amp; b) &#123;<br>\tmatrix t;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">2</span>; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-number\">2</span>; j++) &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k; k &lt;= <span class=\"hljs-number\">2</span>; k++) &#123;<br>\t\t\t\tt.c[i][j] = (t.c[i][j] + a.c[i][k] * b.c[k][j]) % mod;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> t;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quickpow</span><span class=\"hljs-params\">(ll n)</span> </span>&#123;<br>\tF.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = F.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;<br>\tA.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = A.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = A.c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-keyword\">while</span> (n) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (n &amp; <span class=\"hljs-number\">1</span>) F = F * A;<br>\t\tA = A * A;<br>\t\tn &gt;&gt;= <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<p>设置矩阵<code>A</code>为<span class=\"math inline\">\\(m\\times\r\np\\)</span>的矩阵，<code>B</code>为<span class=\"math inline\">\\(p \\times\r\nn\\)</span>的矩阵，则可有<span class=\"math inline\">\\(m \\times\r\nn\\)</span>的矩阵c为矩阵<code>A</code> 与<code>B</code>的乘积。</p>\r\n<p>例如 <span class=\"math display\">\\[\r\nC = \\left[\\begin{array}{a}\r\n1 &amp; 2 &amp; 3\\\\\r\n4 &amp; 5 &amp; 6\r\n\\end{array} \\right] \\times\r\n\\left[\\begin{array}{b}\r\n1&amp;4\\\\\r\n2&amp;5\\\\\r\n3&amp;6\\\\\r\n\\end{array}\\right]\\\\\r\n=\r\n\\left[\\begin{array}{b}\r\n1\\times1+2\\times2+3\\times3&amp;1\\times4+2\\times5+3\\times6\\\\\r\n4\\times1+5\\times2+6\\times3&amp;4\\times4+5\\times5+6\\times6\r\n\\end{array}\\right]\\\\\r\n=\\left[\\begin{array}{b}\r\n14&amp;32\\\\\r\n32&amp;77\\\\\r\n\\end{array}\\right]\r\n\\]</span></p>\r\n<p>接下来我们使用矩阵快速幂解决斐波那契问题</p>\r\n<p>我们将斐波那契数列相邻的两项表示为一个矩阵 $$ $$ 我们希望通过<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n-1}&amp;F_{n-2}\\\\\\end{array}\\right]\\)</span>推出<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n}&amp;F_{n-1}\\\\\\end{array}\\right]\\)</span></p>\r\n<p>尝试构造一个矩阵<code>A</code>使得<span\r\nclass=\"math inline\">\\(\\left[\\begin{array}{b}F_{n-1}&amp;F_{n-2}\\\\\\end{array}\\right]\\times=\\left[\\begin{array}{b}F_{n}&amp;F_{n-1}\\\\\\end{array}\\right]\\)</span>。\r\n<span class=\"math display\">\\[\r\nF_n = F_{n-1}\\times1+F_{n-2}+1\\\\\r\nF_{n-1} = F_{n-1}\\times1+F_{n-2}\\times0\r\n\\]</span></p>\r\n<p>发现<span class=\"math inline\">\\(A =\r\n\\left[\\begin{array}{b}1&amp;1\\\\1&amp;0\\\\\\end{array}\\right]\\)</span></p>\r\n<p>那么 $$ </p>\r\n<p>^{n-2} =$$</p>\r\n<p>代码</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">using</span> ll = <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">matrix</span>&#123;<br>\tll c[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">3</span>];<br>\t<span class=\"hljs-built_in\">matrix</span>() &#123; <span class=\"hljs-built_in\">memset</span>(c, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> c); &#125;<br>&#125;F,A;<br>matrix <span class=\"hljs-keyword\">operator</span>*(matrix&amp; a, matrix&amp; b) &#123;<br>\tmatrix t;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">2</span>; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-number\">2</span>; j++) &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k; k &lt;= <span class=\"hljs-number\">2</span>; k++) &#123;<br>\t\t\t\tt.c[i][j] = (t.c[i][j] + a.c[i][k] * b.c[k][j]) % mod;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> t;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quickpow</span><span class=\"hljs-params\">(ll n)</span> </span>&#123;<br>\tF.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = F.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;<br>\tA.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = A.c[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = A.c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-keyword\">while</span> (n) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (n &amp; <span class=\"hljs-number\">1</span>) F = F * A;<br>\t\tA = A * A;<br>\t\tn &gt;&gt;= <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>\r\n"},{"title":"计算机网络笔记","math":true,"_content":"# 第三章 ： 数据链路层\n\n\n\n<!-- more -->\n\n\n\n## 3.1数据链路层问题\n\n* 数据链路层地位\n\n  * 网络中的主机，路由器都必须实现数据链路层\n  * 局域网的主机，交换机等都必须实现数据链路层\n\n  > 注意：不同链路层可能采用不同协议\n\n  *  数据链路层信道类型\n\n  * 点对点\n\n  * > 一对一的通信方式\n\n  * 广播信道\n\n  * > 一对多 必须使用专用的共享信道协议\n\n### \t\t3.1.1数据链路和帧\n\n* 链路\n  * 一条无源的点到点的物理线路段，中间没有任何其他的交换节点\n  * 一条链路只是一条通路的一个组成部分\n  * 物理链路\n* 数据链路\n  * 把实现控制数据的协议的硬件和软件加到链路上，构成了数据链路\n  * 逻辑链路\n  * 典型实现：适配器（网卡）\n  * 一般的适配器都包含了数据链路层和物理层这两层的功能\n* 帧\n* 为什么需要数据链路层\n  * 物理层解决了节点透明传输bits的问题\n  * 物理层没有解决的问题\n    * 传输错误的问题\n    * 谁接收的问题\n    * 传输结束问题\n\n### 3.1.2 三个基本问题\n\n* 封装成帧\n\n  * 在一段数据的前后分别添加首部和尾部，构成一个帧\n  * 首部和尾部一个重要作用就是帧定界（确定帧的界限）\n  * \n\n* 透明传输\n\n  * 字节填充\n\n* 差错控制\n\n  * 传输的过程中可能会因为各种原因导致一个或多个比特错误\n\n  * 循环冗余检验（crc）\n\n  * CRC校验的原理\n\n    * 多项式表示\n\n      * 对如下二进制bit字符串：\n\n        $$\n        B = b_{n-1}b_{n-2}\\dots b_{1}b_{0}\n        $$\n\n      * 可以将其表示为一个虚拟变量 (x) 的多项式方程 (二进制加权形式)：\n\n      $$\n      B（X） = b_{n-1}X^{n-1}+b_{n-2}X^{n-2}+\\dots+b_1X+b_0\n      $$\n\n      *  例：字符串 (1100101) 可以表示为：\n\n      $$\n      B(1100101) = x^6+x^5+x^2+x^1\n      $$\n\n      *  这样做的目的是，方便之后进行数学编码和对二进制数据串的操作 (如：模二运算)。\n\n    * 模二多项式除法\n\n      * 通常一个多项式B(x)除以另一个多项式G(x)会产生一个商多项式Q(x)和一个余数多项式R(x)：\n\n      * $$\n        B（x）/G(x) = Q(x)+ R(x)\n        $$\n\n      * 由于 模二减法=模二加法，上式可重写为：\n\n      * $$\n        B(x)+R(x)=Q(x)⋅G(x)\n        $$\n\n\n\n## 3.2点对点协议 ppp\n\n### 3.2.1ppp协议特点\n\n协议应满足的需求\n\n* \n\n协议的组成\n\n* 一个将ip封装到串行链路的方法\n* 一个链路控制协议（lcp） 用于建立、配置和测试链路\n* 一套网络网络控制协议（ncp） 每个协议支持不同的网络层协议\n\n### 3.2.2ppp帧格式\n\n各字段的意义\n\n* 首部的第一个字段和尾部的第二个字段都是标志字段F（flag）规定为0x7E\n* 首部中第二个字段为地址字段A规定为0xFF\n* 首部第三个字段为控制字段c规定为0x03\n* 首部第四个字段为两个字节的协议字段\n* 尾部第一个字段为两个字节用于crc检测的帧检测序列fcs\n\n字节填充（异步传输）\n\n* 将原始数据中出现的控制字符、帧定界符替换\n* 在数据前填充一个字节作为转义 后一个字节编码改变\n  * 控制字符+0x20 定界符7->5 eg: 0x7D -> 0x5D\n\n零比特填充（同步传输）\n\n* 如果发送端发现五个1相连 在后面添加一个0\n* 同理接收端发现五个1相连 删除后面的一个0\n\n### 3.2.3ppp协议工作过程\n\n* 连接建立\n\n  * 用户拨号接入isp后建立一条用户电脑和isp的物理连接\n\n  * 个人电脑向isp发送一系列链路控制协议lcp分组建立lcp连接\n\n  * 然后网络层网络控制协议ncp给新接入的用户分配一个临时的ip\n\n* 连接释放\n  * ncp释放网络层连接\n  * 收回分配的IP地址\n  * lcp断开连接释放物理链路层连接\n  * 最后释放物理层连接\n\n\n\n","source":"_posts/我的计算机网络.md","raw":"---\ntitle: 计算机网络笔记\ncategories: \n- 计算机网络\ntags: \n- 计算机网络\nmath: true\n---\n# 第三章 ： 数据链路层\n\n\n\n<!-- more -->\n\n\n\n## 3.1数据链路层问题\n\n* 数据链路层地位\n\n  * 网络中的主机，路由器都必须实现数据链路层\n  * 局域网的主机，交换机等都必须实现数据链路层\n\n  > 注意：不同链路层可能采用不同协议\n\n  *  数据链路层信道类型\n\n  * 点对点\n\n  * > 一对一的通信方式\n\n  * 广播信道\n\n  * > 一对多 必须使用专用的共享信道协议\n\n### \t\t3.1.1数据链路和帧\n\n* 链路\n  * 一条无源的点到点的物理线路段，中间没有任何其他的交换节点\n  * 一条链路只是一条通路的一个组成部分\n  * 物理链路\n* 数据链路\n  * 把实现控制数据的协议的硬件和软件加到链路上，构成了数据链路\n  * 逻辑链路\n  * 典型实现：适配器（网卡）\n  * 一般的适配器都包含了数据链路层和物理层这两层的功能\n* 帧\n* 为什么需要数据链路层\n  * 物理层解决了节点透明传输bits的问题\n  * 物理层没有解决的问题\n    * 传输错误的问题\n    * 谁接收的问题\n    * 传输结束问题\n\n### 3.1.2 三个基本问题\n\n* 封装成帧\n\n  * 在一段数据的前后分别添加首部和尾部，构成一个帧\n  * 首部和尾部一个重要作用就是帧定界（确定帧的界限）\n  * \n\n* 透明传输\n\n  * 字节填充\n\n* 差错控制\n\n  * 传输的过程中可能会因为各种原因导致一个或多个比特错误\n\n  * 循环冗余检验（crc）\n\n  * CRC校验的原理\n\n    * 多项式表示\n\n      * 对如下二进制bit字符串：\n\n        $$\n        B = b_{n-1}b_{n-2}\\dots b_{1}b_{0}\n        $$\n\n      * 可以将其表示为一个虚拟变量 (x) 的多项式方程 (二进制加权形式)：\n\n      $$\n      B（X） = b_{n-1}X^{n-1}+b_{n-2}X^{n-2}+\\dots+b_1X+b_0\n      $$\n\n      *  例：字符串 (1100101) 可以表示为：\n\n      $$\n      B(1100101) = x^6+x^5+x^2+x^1\n      $$\n\n      *  这样做的目的是，方便之后进行数学编码和对二进制数据串的操作 (如：模二运算)。\n\n    * 模二多项式除法\n\n      * 通常一个多项式B(x)除以另一个多项式G(x)会产生一个商多项式Q(x)和一个余数多项式R(x)：\n\n      * $$\n        B（x）/G(x) = Q(x)+ R(x)\n        $$\n\n      * 由于 模二减法=模二加法，上式可重写为：\n\n      * $$\n        B(x)+R(x)=Q(x)⋅G(x)\n        $$\n\n\n\n## 3.2点对点协议 ppp\n\n### 3.2.1ppp协议特点\n\n协议应满足的需求\n\n* \n\n协议的组成\n\n* 一个将ip封装到串行链路的方法\n* 一个链路控制协议（lcp） 用于建立、配置和测试链路\n* 一套网络网络控制协议（ncp） 每个协议支持不同的网络层协议\n\n### 3.2.2ppp帧格式\n\n各字段的意义\n\n* 首部的第一个字段和尾部的第二个字段都是标志字段F（flag）规定为0x7E\n* 首部中第二个字段为地址字段A规定为0xFF\n* 首部第三个字段为控制字段c规定为0x03\n* 首部第四个字段为两个字节的协议字段\n* 尾部第一个字段为两个字节用于crc检测的帧检测序列fcs\n\n字节填充（异步传输）\n\n* 将原始数据中出现的控制字符、帧定界符替换\n* 在数据前填充一个字节作为转义 后一个字节编码改变\n  * 控制字符+0x20 定界符7->5 eg: 0x7D -> 0x5D\n\n零比特填充（同步传输）\n\n* 如果发送端发现五个1相连 在后面添加一个0\n* 同理接收端发现五个1相连 删除后面的一个0\n\n### 3.2.3ppp协议工作过程\n\n* 连接建立\n\n  * 用户拨号接入isp后建立一条用户电脑和isp的物理连接\n\n  * 个人电脑向isp发送一系列链路控制协议lcp分组建立lcp连接\n\n  * 然后网络层网络控制协议ncp给新接入的用户分配一个临时的ip\n\n* 连接释放\n  * ncp释放网络层连接\n  * 收回分配的IP地址\n  * lcp断开连接释放物理链路层连接\n  * 最后释放物理层连接\n\n\n\n","slug":"我的计算机网络","published":1,"date":"2024-05-31T13:08:07.862Z","updated":"2024-05-31T13:08:07.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggnh000bfgjf3gwdfpe7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"第三章-数据链路层\">第三章 ： 数据链路层</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"数据链路层问题\">3.1数据链路层问题</h2>\r\n<ul>\r\n<li><p>数据链路层地位</p>\r\n<ul>\r\n<li>网络中的主机，路由器都必须实现数据链路层</li>\r\n<li>局域网的主机，交换机等都必须实现数据链路层</li>\r\n</ul>\r\n<blockquote>\r\n<p>注意：不同链路层可能采用不同协议</p>\r\n</blockquote>\r\n<ul>\r\n<li><p>数据链路层信道类型</p></li>\r\n<li><p>点对点</p></li>\r\n<li><blockquote>\r\n<p>一对一的通信方式</p>\r\n</blockquote></li>\r\n<li><p>广播信道</p></li>\r\n<li><blockquote>\r\n<p>一对多 必须使用专用的共享信道协议</p>\r\n</blockquote></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"数据链路和帧\">3.1.1数据链路和帧</h3>\r\n<ul>\r\n<li>链路\r\n<ul>\r\n<li>一条无源的点到点的物理线路段，中间没有任何其他的交换节点</li>\r\n<li>一条链路只是一条通路的一个组成部分</li>\r\n<li>物理链路</li>\r\n</ul></li>\r\n<li>数据链路\r\n<ul>\r\n<li>把实现控制数据的协议的硬件和软件加到链路上，构成了数据链路</li>\r\n<li>逻辑链路</li>\r\n<li>典型实现：适配器（网卡）</li>\r\n<li>一般的适配器都包含了数据链路层和物理层这两层的功能</li>\r\n</ul></li>\r\n<li>帧</li>\r\n<li>为什么需要数据链路层\r\n<ul>\r\n<li>物理层解决了节点透明传输bits的问题</li>\r\n<li>物理层没有解决的问题\r\n<ul>\r\n<li>传输错误的问题</li>\r\n<li>谁接收的问题</li>\r\n<li>传输结束问题</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"三个基本问题\">3.1.2 三个基本问题</h3>\r\n<ul>\r\n<li><p>封装成帧</p>\r\n<ul>\r\n<li>在一段数据的前后分别添加首部和尾部，构成一个帧</li>\r\n<li>首部和尾部一个重要作用就是帧定界（确定帧的界限）</li>\r\n<li></li>\r\n</ul></li>\r\n<li><p>透明传输</p>\r\n<ul>\r\n<li>字节填充</li>\r\n</ul></li>\r\n<li><p>差错控制</p>\r\n<ul>\r\n<li><p>传输的过程中可能会因为各种原因导致一个或多个比特错误</p></li>\r\n<li><p>循环冗余检验（crc）</p></li>\r\n<li><p>CRC校验的原理</p>\r\n<ul>\r\n<li><p>多项式表示</p>\r\n<ul>\r\n<li><p>对如下二进制bit字符串：</p>\r\n<p><span class=\"math display\">\\[\r\nB = b_{n-1}b_{n-2}\\dots b_{1}b_{0}\r\n\\]</span></p></li>\r\n<li><p>可以将其表示为一个虚拟变量 (x) 的多项式方程\r\n(二进制加权形式)：</p></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\nB（X） = b_{n-1}X^{n-1}+b_{n-2}X^{n-2}+\\dots+b_1X+b_0\r\n\\]</span></p>\r\n<ul>\r\n<li>例：字符串 (1100101) 可以表示为：</li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\nB(1100101) = x^6+x^5+x^2+x^1\r\n\\]</span></p>\r\n<ul>\r\n<li>这样做的目的是，方便之后进行数学编码和对二进制数据串的操作\r\n(如：模二运算)。</li>\r\n</ul></li>\r\n<li><p>模二多项式除法</p>\r\n<ul>\r\n<li><p>通常一个多项式B(x)除以另一个多项式G(x)会产生一个商多项式Q(x)和一个余数多项式R(x)：</p></li>\r\n<li><p><span class=\"math display\">\\[\r\nB（x）/G(x) = Q(x)+ R(x)\r\n\\]</span></p></li>\r\n<li><p>由于 模二减法=模二加法，上式可重写为：</p></li>\r\n<li><p><span class=\"math display\">\\[\r\nB(x)+R(x)=Q(x)⋅G(x)\r\n\\]</span></p></li>\r\n</ul></li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"点对点协议-ppp\">3.2点对点协议 ppp</h2>\r\n<h3 id=\"ppp协议特点\">3.2.1ppp协议特点</h3>\r\n<p>协议应满足的需求</p>\r\n<ul>\r\n<li></li>\r\n</ul>\r\n<p>协议的组成</p>\r\n<ul>\r\n<li>一个将ip封装到串行链路的方法</li>\r\n<li>一个链路控制协议（lcp） 用于建立、配置和测试链路</li>\r\n<li>一套网络网络控制协议（ncp） 每个协议支持不同的网络层协议</li>\r\n</ul>\r\n<h3 id=\"ppp帧格式\">3.2.2ppp帧格式</h3>\r\n<p>各字段的意义</p>\r\n<ul>\r\n<li>首部的第一个字段和尾部的第二个字段都是标志字段F（flag）规定为0x7E</li>\r\n<li>首部中第二个字段为地址字段A规定为0xFF</li>\r\n<li>首部第三个字段为控制字段c规定为0x03</li>\r\n<li>首部第四个字段为两个字节的协议字段</li>\r\n<li>尾部第一个字段为两个字节用于crc检测的帧检测序列fcs</li>\r\n</ul>\r\n<p>字节填充（异步传输）</p>\r\n<ul>\r\n<li>将原始数据中出现的控制字符、帧定界符替换</li>\r\n<li>在数据前填充一个字节作为转义 后一个字节编码改变\r\n<ul>\r\n<li>控制字符+0x20 定界符7-&gt;5 eg: 0x7D -&gt; 0x5D</li>\r\n</ul></li>\r\n</ul>\r\n<p>零比特填充（同步传输）</p>\r\n<ul>\r\n<li>如果发送端发现五个1相连 在后面添加一个0</li>\r\n<li>同理接收端发现五个1相连 删除后面的一个0</li>\r\n</ul>\r\n<h3 id=\"ppp协议工作过程\">3.2.3ppp协议工作过程</h3>\r\n<ul>\r\n<li><p>连接建立</p>\r\n<ul>\r\n<li><p>用户拨号接入isp后建立一条用户电脑和isp的物理连接</p></li>\r\n<li><p>个人电脑向isp发送一系列链路控制协议lcp分组建立lcp连接</p></li>\r\n<li><p>然后网络层网络控制协议ncp给新接入的用户分配一个临时的ip</p></li>\r\n</ul></li>\r\n<li><p>连接释放</p>\r\n<ul>\r\n<li>ncp释放网络层连接</li>\r\n<li>收回分配的IP地址</li>\r\n<li>lcp断开连接释放物理链路层连接</li>\r\n<li>最后释放物理层连接</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"第三章-数据链路层\">第三章 ： 数据链路层</h1>","more":"<h2 id=\"数据链路层问题\">3.1数据链路层问题</h2>\r\n<ul>\r\n<li><p>数据链路层地位</p>\r\n<ul>\r\n<li>网络中的主机，路由器都必须实现数据链路层</li>\r\n<li>局域网的主机，交换机等都必须实现数据链路层</li>\r\n</ul>\r\n<blockquote>\r\n<p>注意：不同链路层可能采用不同协议</p>\r\n</blockquote>\r\n<ul>\r\n<li><p>数据链路层信道类型</p></li>\r\n<li><p>点对点</p></li>\r\n<li><blockquote>\r\n<p>一对一的通信方式</p>\r\n</blockquote></li>\r\n<li><p>广播信道</p></li>\r\n<li><blockquote>\r\n<p>一对多 必须使用专用的共享信道协议</p>\r\n</blockquote></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"数据链路和帧\">3.1.1数据链路和帧</h3>\r\n<ul>\r\n<li>链路\r\n<ul>\r\n<li>一条无源的点到点的物理线路段，中间没有任何其他的交换节点</li>\r\n<li>一条链路只是一条通路的一个组成部分</li>\r\n<li>物理链路</li>\r\n</ul></li>\r\n<li>数据链路\r\n<ul>\r\n<li>把实现控制数据的协议的硬件和软件加到链路上，构成了数据链路</li>\r\n<li>逻辑链路</li>\r\n<li>典型实现：适配器（网卡）</li>\r\n<li>一般的适配器都包含了数据链路层和物理层这两层的功能</li>\r\n</ul></li>\r\n<li>帧</li>\r\n<li>为什么需要数据链路层\r\n<ul>\r\n<li>物理层解决了节点透明传输bits的问题</li>\r\n<li>物理层没有解决的问题\r\n<ul>\r\n<li>传输错误的问题</li>\r\n<li>谁接收的问题</li>\r\n<li>传输结束问题</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"三个基本问题\">3.1.2 三个基本问题</h3>\r\n<ul>\r\n<li><p>封装成帧</p>\r\n<ul>\r\n<li>在一段数据的前后分别添加首部和尾部，构成一个帧</li>\r\n<li>首部和尾部一个重要作用就是帧定界（确定帧的界限）</li>\r\n<li></li>\r\n</ul></li>\r\n<li><p>透明传输</p>\r\n<ul>\r\n<li>字节填充</li>\r\n</ul></li>\r\n<li><p>差错控制</p>\r\n<ul>\r\n<li><p>传输的过程中可能会因为各种原因导致一个或多个比特错误</p></li>\r\n<li><p>循环冗余检验（crc）</p></li>\r\n<li><p>CRC校验的原理</p>\r\n<ul>\r\n<li><p>多项式表示</p>\r\n<ul>\r\n<li><p>对如下二进制bit字符串：</p>\r\n<p><span class=\"math display\">\\[\r\nB = b_{n-1}b_{n-2}\\dots b_{1}b_{0}\r\n\\]</span></p></li>\r\n<li><p>可以将其表示为一个虚拟变量 (x) 的多项式方程\r\n(二进制加权形式)：</p></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\nB（X） = b_{n-1}X^{n-1}+b_{n-2}X^{n-2}+\\dots+b_1X+b_0\r\n\\]</span></p>\r\n<ul>\r\n<li>例：字符串 (1100101) 可以表示为：</li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\nB(1100101) = x^6+x^5+x^2+x^1\r\n\\]</span></p>\r\n<ul>\r\n<li>这样做的目的是，方便之后进行数学编码和对二进制数据串的操作\r\n(如：模二运算)。</li>\r\n</ul></li>\r\n<li><p>模二多项式除法</p>\r\n<ul>\r\n<li><p>通常一个多项式B(x)除以另一个多项式G(x)会产生一个商多项式Q(x)和一个余数多项式R(x)：</p></li>\r\n<li><p><span class=\"math display\">\\[\r\nB（x）/G(x) = Q(x)+ R(x)\r\n\\]</span></p></li>\r\n<li><p>由于 模二减法=模二加法，上式可重写为：</p></li>\r\n<li><p><span class=\"math display\">\\[\r\nB(x)+R(x)=Q(x)⋅G(x)\r\n\\]</span></p></li>\r\n</ul></li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"点对点协议-ppp\">3.2点对点协议 ppp</h2>\r\n<h3 id=\"ppp协议特点\">3.2.1ppp协议特点</h3>\r\n<p>协议应满足的需求</p>\r\n<ul>\r\n<li></li>\r\n</ul>\r\n<p>协议的组成</p>\r\n<ul>\r\n<li>一个将ip封装到串行链路的方法</li>\r\n<li>一个链路控制协议（lcp） 用于建立、配置和测试链路</li>\r\n<li>一套网络网络控制协议（ncp） 每个协议支持不同的网络层协议</li>\r\n</ul>\r\n<h3 id=\"ppp帧格式\">3.2.2ppp帧格式</h3>\r\n<p>各字段的意义</p>\r\n<ul>\r\n<li>首部的第一个字段和尾部的第二个字段都是标志字段F（flag）规定为0x7E</li>\r\n<li>首部中第二个字段为地址字段A规定为0xFF</li>\r\n<li>首部第三个字段为控制字段c规定为0x03</li>\r\n<li>首部第四个字段为两个字节的协议字段</li>\r\n<li>尾部第一个字段为两个字节用于crc检测的帧检测序列fcs</li>\r\n</ul>\r\n<p>字节填充（异步传输）</p>\r\n<ul>\r\n<li>将原始数据中出现的控制字符、帧定界符替换</li>\r\n<li>在数据前填充一个字节作为转义 后一个字节编码改变\r\n<ul>\r\n<li>控制字符+0x20 定界符7-&gt;5 eg: 0x7D -&gt; 0x5D</li>\r\n</ul></li>\r\n</ul>\r\n<p>零比特填充（同步传输）</p>\r\n<ul>\r\n<li>如果发送端发现五个1相连 在后面添加一个0</li>\r\n<li>同理接收端发现五个1相连 删除后面的一个0</li>\r\n</ul>\r\n<h3 id=\"ppp协议工作过程\">3.2.3ppp协议工作过程</h3>\r\n<ul>\r\n<li><p>连接建立</p>\r\n<ul>\r\n<li><p>用户拨号接入isp后建立一条用户电脑和isp的物理连接</p></li>\r\n<li><p>个人电脑向isp发送一系列链路控制协议lcp分组建立lcp连接</p></li>\r\n<li><p>然后网络层网络控制协议ncp给新接入的用户分配一个临时的ip</p></li>\r\n</ul></li>\r\n<li><p>连接释放</p>\r\n<ul>\r\n<li>ncp释放网络层连接</li>\r\n<li>收回分配的IP地址</li>\r\n<li>lcp断开连接释放物理链路层连接</li>\r\n<li>最后释放物理层连接</li>\r\n</ul></li>\r\n</ul>"},{"title":"小技巧-寻找区间奇数个数","math":true,"_content":"\n\n\n\n\n\n\n给定区间l，r 求区间的奇数个数\n\n<!--more-->\n\n((r + 1) / 2 - l / 2)\n\n有种前缀和样子\n\n r/2表示0到r之间奇数的个数 \n\n+1是为了防止r是奇数时初二端点没算上\n\nl/2表示0到l之间的奇数个数\n\n没有+1是为了不算上l的端点值\n\n实现类似arr[ r ]  - arr[ l-1 ] 的效果","source":"_posts/小技巧-求区间奇数个数.md","raw":"---\ntitle : 小技巧-寻找区间奇数个数\ncategories: \n- 算法\ntags: \n- 小技巧\nmath : true\n---\n\n\n\n\n\n\n\n给定区间l，r 求区间的奇数个数\n\n<!--more-->\n\n((r + 1) / 2 - l / 2)\n\n有种前缀和样子\n\n r/2表示0到r之间奇数的个数 \n\n+1是为了防止r是奇数时初二端点没算上\n\nl/2表示0到l之间的奇数个数\n\n没有+1是为了不算上l的端点值\n\n实现类似arr[ r ]  - arr[ l-1 ] 的效果","slug":"小技巧-求区间奇数个数","published":1,"date":"2024-05-31T13:08:07.862Z","updated":"2024-05-31T13:08:07.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggni000cfgjf29u6d2u6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>给定区间l，r 求区间的奇数个数</p>\r\n<span id=\"more\"></span>\r\n<p>((r + 1) / 2 - l / 2)</p>\r\n<p>有种前缀和样子</p>\r\n<p>r/2表示0到r之间奇数的个数</p>\r\n<p>+1是为了防止r是奇数时初二端点没算上</p>\r\n<p>l/2表示0到l之间的奇数个数</p>\r\n<p>没有+1是为了不算上l的端点值</p>\r\n<p>实现类似arr[ r ] - arr[ l-1 ] 的效果</p>\r\n","site":{"data":{}},"excerpt":"<p>给定区间l，r 求区间的奇数个数</p>","more":"<p>((r + 1) / 2 - l / 2)</p>\r\n<p>有种前缀和样子</p>\r\n<p>r/2表示0到r之间奇数的个数</p>\r\n<p>+1是为了防止r是奇数时初二端点没算上</p>\r\n<p>l/2表示0到l之间的奇数个数</p>\r\n<p>没有+1是为了不算上l的端点值</p>\r\n<p>实现类似arr[ r ] - arr[ l-1 ] 的效果</p>"},{"title":"c++运算符重载","_content":"\n\n\n\n\n\n\n# c++运算符重载概念和原理\n\nc++的运算符加减乘除只能对于基本数据类型变量或常量进行运算，当我们想要进行对象之间的运算时略显繁琐，希望对象之间也可以直接使用运算符进行运算\n\n利用 C++ 提供的“运算符重载”机制，赋予运算符新的功能，就能解决用`+`将两个对象相加这样的问题。\n\n<!--more-->\n\n运算符重载，就是对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。运算符重载的目的是使得 C++ 中的运算符也能够用来操作对象。\n\n```c++\n返回值类型 operator 运算符(形参表) {\n...\n}\n```\n\n包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。\n\n运算符可以重载为全局函数，也可以被重载为成员函数，应用于类或结构体。\n\n比如我们在写计算几何时可以定义point结构体用于表示点坐标重写运算符加减点坐标得到二维平面上的向量来计算会更加简便\n\n```c++\nstruct point{\n    int x;\n    int y;\n    point(int x = 0, int y = 0) :x(x), y(y) {};\n    point operator -(const point& p) {\n        x -= p.x; y -= p.y;\n        return *this;\n    }\n};\nint main() {\n  \n    point p1(0, 0), p2(1, 2);\n    p1 = p1 - p2;\n    cout << p1.x<<\" \" << p1.y;\n    return 0;\n}\n```\n\n结果是\n\n> -1 -2\n\n运算符重载为全局函数时，参数的个数等于运算符的目数（即操作数的个数）；运算符重载为成员函数时，参数的个数等于运算符的目数减一。\n\n# 运算符重载为友元函数\n\n一般情况下，将运算符重载为成员函数是较好的选择。但有时，重载为成员函数不能满足使用要求，重载为全局函数又不能访问类的私有成员，因此需要将运算符重载为友元。\n\n在重载运算符的基础之上 在前面加上关键词friend 即可。重载的运算符可以访问到结构体内变量\n","source":"_posts/运算符重载.md","raw":"---\ntitle: c++运算符重载\ncategories: \n- 算法\ntags:\n- 运算符重载\n---\n\n\n\n\n\n\n\n# c++运算符重载概念和原理\n\nc++的运算符加减乘除只能对于基本数据类型变量或常量进行运算，当我们想要进行对象之间的运算时略显繁琐，希望对象之间也可以直接使用运算符进行运算\n\n利用 C++ 提供的“运算符重载”机制，赋予运算符新的功能，就能解决用`+`将两个对象相加这样的问题。\n\n<!--more-->\n\n运算符重载，就是对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。运算符重载的目的是使得 C++ 中的运算符也能够用来操作对象。\n\n```c++\n返回值类型 operator 运算符(形参表) {\n...\n}\n```\n\n包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。\n\n运算符可以重载为全局函数，也可以被重载为成员函数，应用于类或结构体。\n\n比如我们在写计算几何时可以定义point结构体用于表示点坐标重写运算符加减点坐标得到二维平面上的向量来计算会更加简便\n\n```c++\nstruct point{\n    int x;\n    int y;\n    point(int x = 0, int y = 0) :x(x), y(y) {};\n    point operator -(const point& p) {\n        x -= p.x; y -= p.y;\n        return *this;\n    }\n};\nint main() {\n  \n    point p1(0, 0), p2(1, 2);\n    p1 = p1 - p2;\n    cout << p1.x<<\" \" << p1.y;\n    return 0;\n}\n```\n\n结果是\n\n> -1 -2\n\n运算符重载为全局函数时，参数的个数等于运算符的目数（即操作数的个数）；运算符重载为成员函数时，参数的个数等于运算符的目数减一。\n\n# 运算符重载为友元函数\n\n一般情况下，将运算符重载为成员函数是较好的选择。但有时，重载为成员函数不能满足使用要求，重载为全局函数又不能访问类的私有成员，因此需要将运算符重载为友元。\n\n在重载运算符的基础之上 在前面加上关键词friend 即可。重载的运算符可以访问到结构体内变量\n","slug":"运算符重载","published":1,"date":"2024-05-31T13:08:07.863Z","updated":"2024-05-31T13:08:07.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwurggno000xfgjffmmgb4aa","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"c运算符重载概念和原理\">c++运算符重载概念和原理</h1>\r\n<p>c++的运算符加减乘除只能对于基本数据类型变量或常量进行运算，当我们想要进行对象之间的运算时略显繁琐，希望对象之间也可以直接使用运算符进行运算</p>\r\n<p>利用 C++\r\n提供的“运算符重载”机制，赋予运算符新的功能，就能解决用<code>+</code>将两个对象相加这样的问题。</p>\r\n<span id=\"more\"></span>\r\n<p>运算符重载，就是对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。运算符重载的目的是使得\r\nC++ 中的运算符也能够用来操作对象。</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">返回值类型 <span class=\"hljs-keyword\">operator</span> 运算符(形参表) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。</p>\r\n<p>运算符可以重载为全局函数，也可以被重载为成员函数，应用于类或结构体。</p>\r\n<p>比如我们在写计算几何时可以定义point结构体用于表示点坐标重写运算符加减点坐标得到二维平面上的向量来计算会更加简便</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">point</span>&#123;<br>    <span class=\"hljs-type\">int</span> x;<br>    <span class=\"hljs-type\">int</span> y;<br>    <span class=\"hljs-built_in\">point</span>(<span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int</span> y = <span class=\"hljs-number\">0</span>) :<span class=\"hljs-built_in\">x</span>(x), <span class=\"hljs-built_in\">y</span>(y) &#123;&#125;;<br>    point <span class=\"hljs-keyword\">operator</span> -(<span class=\"hljs-type\">const</span> point&amp; p) &#123;<br>        x -= p.x; y -= p.y;<br>        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;<br>    &#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>    <span class=\"hljs-function\">point <span class=\"hljs-title\">p1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-title\">p2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></span>;<br>    p1 = p1 - p2;<br>    cout &lt;&lt; p1.x&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; p1.y;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>结果是</p>\r\n<blockquote>\r\n<p>-1 -2</p>\r\n</blockquote>\r\n<p>运算符重载为全局函数时，参数的个数等于运算符的目数（即操作数的个数）；运算符重载为成员函数时，参数的个数等于运算符的目数减一。</p>\r\n<h1 id=\"运算符重载为友元函数\">运算符重载为友元函数</h1>\r\n<p>一般情况下，将运算符重载为成员函数是较好的选择。但有时，重载为成员函数不能满足使用要求，重载为全局函数又不能访问类的私有成员，因此需要将运算符重载为友元。</p>\r\n<p>在重载运算符的基础之上 在前面加上关键词friend\r\n即可。重载的运算符可以访问到结构体内变量</p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"c运算符重载概念和原理\">c++运算符重载概念和原理</h1>\r\n<p>c++的运算符加减乘除只能对于基本数据类型变量或常量进行运算，当我们想要进行对象之间的运算时略显繁琐，希望对象之间也可以直接使用运算符进行运算</p>\r\n<p>利用 C++\r\n提供的“运算符重载”机制，赋予运算符新的功能，就能解决用<code>+</code>将两个对象相加这样的问题。</p>","more":"<p>运算符重载，就是对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。运算符重载的目的是使得\r\nC++ 中的运算符也能够用来操作对象。</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">返回值类型 <span class=\"hljs-keyword\">operator</span> 运算符(形参表) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。</p>\r\n<p>运算符可以重载为全局函数，也可以被重载为成员函数，应用于类或结构体。</p>\r\n<p>比如我们在写计算几何时可以定义point结构体用于表示点坐标重写运算符加减点坐标得到二维平面上的向量来计算会更加简便</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">point</span>&#123;<br>    <span class=\"hljs-type\">int</span> x;<br>    <span class=\"hljs-type\">int</span> y;<br>    <span class=\"hljs-built_in\">point</span>(<span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int</span> y = <span class=\"hljs-number\">0</span>) :<span class=\"hljs-built_in\">x</span>(x), <span class=\"hljs-built_in\">y</span>(y) &#123;&#125;;<br>    point <span class=\"hljs-keyword\">operator</span> -(<span class=\"hljs-type\">const</span> point&amp; p) &#123;<br>        x -= p.x; y -= p.y;<br>        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;<br>    &#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>    <span class=\"hljs-function\">point <span class=\"hljs-title\">p1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-title\">p2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></span>;<br>    p1 = p1 - p2;<br>    cout &lt;&lt; p1.x&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; p1.y;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>结果是</p>\r\n<blockquote>\r\n<p>-1 -2</p>\r\n</blockquote>\r\n<p>运算符重载为全局函数时，参数的个数等于运算符的目数（即操作数的个数）；运算符重载为成员函数时，参数的个数等于运算符的目数减一。</p>\r\n<h1 id=\"运算符重载为友元函数\">运算符重载为友元函数</h1>\r\n<p>一般情况下，将运算符重载为成员函数是较好的选择。但有时，重载为成员函数不能满足使用要求，重载为全局函数又不能访问类的私有成员，因此需要将运算符重载为友元。</p>\r\n<p>在重载运算符的基础之上 在前面加上关键词friend\r\n即可。重载的运算符可以访问到结构体内变量</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clwurggn40000fgjffyie31y2","category_id":"clwurggnc0003fgjfhthj3hfx","_id":"clwurggnj000dfgjf3wv96jls"},{"post_id":"clwurggna0002fgjfbnge4y9e","category_id":"clwurggnh0008fgjfbmmj4569","_id":"clwurggnk000ifgjfgdbv1qzt"},{"post_id":"clwurggne0005fgjf037a2614","category_id":"clwurggnj000efgjf2ihycbl9","_id":"clwurggnm000mfgjfd4vt69hf"},{"post_id":"clwurggng0007fgjf1yu68lut","category_id":"clwurggnj000efgjf2ihycbl9","_id":"clwurggnm000ofgjfc7zb4ml1"},{"post_id":"clwurggnh000bfgjf3gwdfpe7","category_id":"clwurggnl000lfgjf6qd78uvp","_id":"clwurggnn000sfgjfhqeacmxz"},{"post_id":"clwurggni000cfgjf29u6d2u6","category_id":"clwurggnj000efgjf2ihycbl9","_id":"clwurggnn000vfgjfd514axlz"},{"post_id":"clwurggno000xfgjffmmgb4aa","category_id":"clwurggnj000efgjf2ihycbl9","_id":"clwurggnp000zfgjf75t2hl3a"}],"PostTag":[{"post_id":"clwurggn40000fgjffyie31y2","tag_id":"clwurggnd0004fgjf9d052935","_id":"clwurggnh000afgjf1cql0i8g"},{"post_id":"clwurggne0005fgjf037a2614","tag_id":"clwurggnh0009fgjf9lqe6qpe","_id":"clwurggnj000gfgjfdwske5vh"},{"post_id":"clwurggni000cfgjf29u6d2u6","tag_id":"clwurggnh0009fgjf9lqe6qpe","_id":"clwurggnk000hfgjf90hy7cce"},{"post_id":"clwurggnf0006fgjfhr9ug5rl","tag_id":"clwurggnj000ffgjf6msu147g","_id":"clwurggnm000rfgjf16mf9dh6"},{"post_id":"clwurggnf0006fgjfhr9ug5rl","tag_id":"clwurggnl000kfgjfa4sxbxmd","_id":"clwurggnn000tfgjf8v2p6w41"},{"post_id":"clwurggnf0006fgjfhr9ug5rl","tag_id":"clwurggnm000nfgjf6ychddg7","_id":"clwurggnn000ufgjf9k353tsg"},{"post_id":"clwurggnh000bfgjf3gwdfpe7","tag_id":"clwurggnm000qfgjffnzpeov0","_id":"clwurggnn000wfgjfb5yg71ll"},{"post_id":"clwurggno000xfgjffmmgb4aa","tag_id":"clwurggnp000yfgjf91952nc4","_id":"clwurggnp0010fgjfdrpneqgg"}],"Tag":[{"name":"ai换脸","_id":"clwurggnd0004fgjf9d052935"},{"name":"小技巧","_id":"clwurggnh0009fgjf9lqe6qpe"},{"name":"js","_id":"clwurggnj000ffgjf6msu147g"},{"name":"py","_id":"clwurggnl000kfgjfa4sxbxmd"},{"name":"逆向","_id":"clwurggnm000nfgjf6ychddg7"},{"name":"计算机网络","_id":"clwurggnm000qfgjffnzpeov0"},{"name":"运算符重载","_id":"clwurggnp000yfgjf91952nc4"}]}}